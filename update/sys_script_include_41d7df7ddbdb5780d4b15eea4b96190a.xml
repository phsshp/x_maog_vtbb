<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_maog_vtbb.Once</api_name>
        <client_callable>false</client_callable>
        <description>Supports calling a function exactly once for each new object encountered.&#13;
Requires that key equality is the same as object equality.&#13;
&#13;
If you use exists() you must finish using it before calling add() the first time.&#13;
&#13;
If you will call removeRemaining:&#13;
  1. You must not modify any object you passed to exists() - your object is not copied.&#13;
  2. You must call add() for every object you want to keep.&#13;
  3. You must finish adding before calling removeRemaining.&#13;
&#13;
Member functions:&#13;
&#13;
- exists(obj, key): Registers a pre-existing object.&#13;
&#13;
- add(obj, key, objFn): Invoke onceFn the first time this object's key is seen.&#13;
   - objFn(obj): Called the first time this object is encountered, based on the key.&#13;
&#13;
- removeRemaining(removeFn)&#13;
   - removeFn(obj): Called for every existing object that was not also passed to add().</description>
        <name>Once</name>
        <script><![CDATA[var Once = Class.create();
Once.prototype = (function Once_proto(s) {
	var p = {};
	var TYPE = p.type = 'Once';

	var log = x_maog_log.Logger.getLogger(TYPE, gs.getCurrentScopeName());

	var STATE = s.STATE = {};
	var EXISTS =  STATE.EXISTS  = 'exists';  // Registered via exists() method.
	var ADDED =   STATE.ADDED   = 'added';   // Added via add() or update() method.
	var UPDATED = STATE.UPDATED = 'updated'; // Updated via update() method.
	var REMOVED = STATE.REMOVED = 'removed'; // Removed 

	var o_forOwnProperties = Utils.o_forOwnProperties;

	p.initialize = function initialize(nameForLogging) {
		var keys = {};

		nameForLogging = nameForLogging || 'Once ' + gs.generateGUID();
		nameForLogging = '[' + nameForLogging + ']';

		// Register a pre-existing object.
		this.exists = function exists(obj, key, updFn) {
			var data;

			if (key === null) key = '';
			if (key !== undefined) {
				if (data === undefined) {
					keys[key] = data = { obj: obj, key: key };
					log.info('{0} saw: {1}: {2}', nameForLogging, key + '', obj.toString());
				} else {
					data = keys[key];
					log.debug('{0} re-saw: {1}: {2}', nameForLogging, data.key + '', data.obj.toString());
				}
				if (updFn) updFn(data.obj, key, data.state);
				data.state = STATE.EXISTS;
			} else {
				throw new TypeError(
					gs.getMessage('{0} key undefined for obj={1}',
								  nameForLogging, obj + ''));
			}
		};

		// Add object if it has not already been seen.
		this.add = function add(obj, key, objFn, updFn) {
			var data, oldState;

			if (key === null) key = '';
			if (key !== undefined) {
				data = keys[key];
				if (data === undefined) {
					keys[key] = data = { obj: obj, key: key };	
					if (objFn) {
						objFn(obj, key, data.state);
						log.info('{0} add: {1}: {2}', nameForLogging, 
								 key + '', obj + '' /* Could be nil */);
					}
				} else {
					data = keys[key];
					log.debug('{0} skip: {1}: {2}', nameForLogging,
							  key + '', data.obj.toString());
				}
				if (updFn) updFn(data.obj, data.key, data.state);
				data.state = STATE.ADDED;
			} else {
				throw new TypeError(
					gs.getMessage('{0} key undefined for obj={1}',
								  nameForLogging, obj + ''));
			}
		};

		// Do something to an object whether it has been seen or not.
		this.update = function update(obj, key, updFn) {
			var data, oldState;

			if (key === null) key = '';
			if (key !== undefined) {
				data = keys[key];
				if (data === undefined) {
					keys[key] = data = { obj: obj, key: key, state: STATE.ADDED };	
					log.info('{0} update add: {1} {2}: {3}', nameForLogging,
							 typeof key, key + '', obj + '' /* could be primitive */);
				} else {
					data = keys[key];
					if (data.state === STATE.EXISTS) {
						log.info('{0} update: {1} {2}: {3}', nameForLogging,
								 typeof key, key + '', obj + '' /* could be primitive */);
					}
				}
				if (updFn) updFn(data.obj, data.key, data.state);
				data.state = STATE.UPDATED;
			} else {
				throw new TypeError(
					gs.getMessage('{0} key undefined for obj={1}',
								  nameForLogging, obj + ''));
			}
		};

		// Do something to objects that already existed.
		this.forExisting = function forExisting(updFn) {
			o_forOwnProperties(keys, function remove(data, key) {
				if (data.state === EXISTS) {
					updFn(data.obj, key, data.state);
				}
			});
		};

		this.removeRemaining = function removeRemaining(idFn) {
			var ids = [], tableGr;
			this.forExisting(function collectRemaining(obj, key) {
				ids.push(idFn(obj, key));
			});
			ids = ids.join(',');
			tableGr = new GlideRecord(CLASS);
			tableGr.query('sys_id', 'IN', ids);
			tableGr.deleteMultiple();
			log.debug('{0} removed {1} records in {2}', nameForLogging,
					  tableGr.getRowCount(), ids);
		};

		this.forEach = function forEach(fn) {
			for (var key in keys) {
				if (keys.hasOwnProperty(key)) {
					var data = keys[key];
					fn(data.obj, data.key, data.state);
				}
			}
		};

		this.toString = function toString() {
			var buffer = [];
			this.forEach(function(obj, key, state) {
				buffer.push(state);
				buffer.push(key.toString());
				buffer.push(': ');
				buffer.push(obj.toString());
				buffer.push('\n');
			});
			return buffer.join('');
		};

		s.Descriptor = function Descriptor(key, obj, more) {
			this.key = key;
			this.obj = obj;
			this.more = more;
			this.toString = function() {
				var buffer = ['[Descriptor '];
				buffer.push(key + '');
				buffer.push(' ');
				buffer.push(obj + '');
				if (more !== undefined) {
					buffer.push(' (');
					buffer.push(more + '');
					buffer.push(')');
				}
				buffer.push(']');
				return buffer.join('');
			};
		};
	};
	return p;
})(Once);]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>peter.smith</sys_created_by>
        <sys_created_on>2018-07-15 14:39:50</sys_created_on>
        <sys_id>41d7df7ddbdb5780d4b15eea4b96190a</sys_id>
        <sys_mod_count>51</sys_mod_count>
        <sys_name>Once</sys_name>
        <sys_package display_value="Visual Task Board Builder" source="x_maog_vtbb">ae48259bdbee9b00898be3a84b9619f7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Visual Task Board Builder">ae48259bdbee9b00898be3a84b9619f7</sys_scope>
        <sys_update_name>sys_script_include_41d7df7ddbdb5780d4b15eea4b96190a</sys_update_name>
        <sys_updated_by>peter.smith</sys_updated_by>
        <sys_updated_on>2018-08-13 23:57:45</sys_updated_on>
    </sys_script_include>
</record_update>
