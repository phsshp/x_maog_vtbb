<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_maog_vtbb.GrWrapper</api_name>
        <client_callable>false</client_callable>
        <description>GlideRecord Wrapper</description>
        <name>GrWrapper</name>
        <script><![CDATA[var GrWrapper = Class.create();
GrWrapper.prototype = (function GrWrapper_proto(s) {
	var p = {};
	var TYPE = p.type = 'GrWrapper';

	var log = x_maog_log.Logger.getLogger(TYPE);

	var MODE = s.MODE = {};
	MODE.SHARED = true;  // Share the GlideRecord
	MODE.PRIVATE = false; // Private is the default.

	p.initialize = function initialize(wrap, mode, spec) {
		this.mode = mode || MODE.PRIVATE;
		this.table = spec.table;
		this.prefix = spec.prefix || spec.table;
		this.log = spec.log || log;

		this.wGr = this.wGe = this.sysId = null;

		if (wrap === undefined) {
			// New record - leave everything null.
			this.displayName = '(new)';
		} else if (typeof wrap === 'string') {
			// SysId only - lazy load if necessary.
			this.sysId = wrap;
		} else if (typeof wrap === 'object') {
			// GlideElement or GlideRecord
			if (typeof wrap.getUniqueValue === 'function') {
				// GlideRecord
				this.sysId = wrap.getUniqueValue();
				if (this.mode === MODE.SHARED) {
					this.wGr = wrap;
					this.displayValue = this.wGr.getDisplayValue();
				} else {
					this.wGr = null;
				}
			} else if (typeof wrap.getRefRecord === 'function') {
				// GlideElement
				this.sysId = wrap.toString();
				this.wGe = wrap;
				this.displayValue = this.wGe.getDisplayValue();
			}
		} else {
			throw new TypeError('Need a Sys ID, GlideRecord, or GlideElement');
		}
	};

	// Return the SysID.  Does not need to fetch the GlideRecord.
	// If the SysID is blank, initialize a new record.
	p.getSysId = function getSysId() {
		if (!this.sysId) {
			this.wGr = new GlideRecord(this.table);
			this.wGr.initialize();
			this.wGr.setNewGuidValue(gs.generateGUID());
			this.sysId = this.wGr.getUniqueValue();
		}
		return this.sysId;
	};

	p.haveGr = function haveGr() { return !!this.wGr; };

	// Get the GlideRecord in TABLE that matches the supplied Sys ID.
	// Cache the GlideRecord for reuse.
	p.getGr = function getGr() {
		if (!this.wGr) {
			if (this.wGe) {
				this.wGr = this.wGe.getRefRecord();
			} else if (this.sysId) {
				this.wGr = new GlideRecord(this.table);
				if (this.wGr.get(this.sysId)) {
					this.displayValue = this.wGr.getDisplayValue();
				} else {
					throw new TypeError('No record in ' + this.table + ' for Sys ID ' + sysId);
				}
			} else {
				this.getSysId(); // Initialize a new record.
			}
		}
		return this.wGr;
	};

	p.getDisplayValue = function getDisplayValue() {
		return this.displayValue; // Undefined until getGr().
	};

	p.toString = function toString() {
		var parts = [];
		parts.push('[');
		parts.push(this.prefix);
		parts.push(' ');
		if (this.sysId) {
			parts.push(this.sysId);
		} else {
			parts.push('(new)');
		}
		if (this.displayValue) {
			parts.push(' ');
			parts.push(this.displayValue);
		}
		if (this.mode === MODE.SHARED) {
			parts.push(' (shared)');
		}
		parts.push(']');
		return parts.join('');
	};

	p.update = function update() { this.getGr().update(); };
	p.insert = function insert() { this.getGr().insert(); };
	p.setForceUpdate = function setForceUpdate(isOn) { this.getGr().setForceUpdate(isOn); };
	p.getUniqueValue = function getUniqueValue() { return this.getGr().getUniqueValue(); };
	p.setValue = function setValue(n, v) { return this.getGr().setValue(n, v); };
	p.getValue = function getValue(n) { return this.getGr().getValue(n); };

	p.mixThis = function mixThis(that) {
		for (var k in this) {
			if (this.hasOwnProperty(k)) {
				that[k] = this[k];
			}
		}
	};

	s.query = function query(filterFn, recordFn, spec) {
		var records = [], record, enumGr;

		if (!recordFn) {
			recordFn = function queryRecordFn(wGr) {
				return new spec.classFn(wGr);
			};
		}

		enumGr = new GlideRecord(spec.table);
		enumGr.initialize();

		if (typeof filterFn === 'function') {
			filterFn(enumGr);
		} else if (typeof filterFn === 'string' && filterFn
				   || filterFn === undefined || filterFn === null) {
			enumGr.addEncodedQuery(filter);
		}

		enumGr.query();

		while (enumGr.next()) {
			record = recordFn(enumGr);
			if (record) {
				records.push(record);
			}
		}
		return records;
	};

	s.mixProto = function mixProto(mixee) {
		p = GrWrapper.prototype;
		for (var k in p) {
			if (p.hasOwnProperty(k)) {
				mixee[k] = p[k];
			}
		}
	};

	return p;
})(GrWrapper);]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>peter.smith</sys_created_by>
        <sys_created_on>2018-08-09 02:40:58</sys_created_on>
        <sys_id>b6cb6d31dbb31b00d4b15eea4b9619ed</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name>GrWrapper</sys_name>
        <sys_package display_value="Visual Task Board Builder" source="x_maog_vtbb">ae48259bdbee9b00898be3a84b9619f7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Visual Task Board Builder">ae48259bdbee9b00898be3a84b9619f7</sys_scope>
        <sys_update_name>sys_script_include_b6cb6d31dbb31b00d4b15eea4b9619ed</sys_update_name>
        <sys_updated_by>peter.smith</sys_updated_by>
        <sys_updated_on>2018-08-13 23:57:23</sys_updated_on>
    </sys_script_include>
</record_update>
