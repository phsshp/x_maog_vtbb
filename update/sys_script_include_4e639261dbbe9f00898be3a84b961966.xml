<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_maog_vtbb.VtbBoard</api_name>
        <client_callable>false</client_callable>
        <description>Visual Task Board wrapper.</description>
        <name>VtbBoard</name>
        <script><![CDATA[var VtbBoard = Class.create();
VtbBoard.prototype = (function VtbBoard_proto(s) {
	var p = {};
	var TYPE = p.type = 'VtbBoard';
	var TABLE = 'vtb_board';

	var log = s.log = x_maog_log.Logger.getLogger(TYPE, gs.getCurrentScopeName());

	var SPEC = { table: TABLE, prefix: 'VTB', classFn: s, log: log };

	var WORK_REQUEST_MENU = '9656ce8cdbf7430005dce3a84b961941';

	GrWrapper.mixProto(p);
	p.initialize = function initialize(wrap, mode) {
		new GrWrapper(wrap, mode, SPEC).mixThis(this);
	};

	p.toString = (function overrideToString(superToString) {
		return function toString() {
			var more;
			if (this.haveGr()) {
				more = this.getGr().getValue('x_maog_vtbb_internal_name');
			}
			return superToString.call(this, more);
		};
	})(p.toString);

	p.getBoardBuilder = function getBoardBuilder() {
		return new BoardBuilder(this.getGr().x_maog_vtbb_builder);
	};

	p.getOwner = function getOwner() { return new User(this.getGr().owner); };

	p.getAssignmentGroup = function getAssignmentGroup() {
		return new Group(this.getGr().group);
	};

	function findGroupSpecificRoleIds(bb, vtb, group) {
		var roleGa, roleFilter, roleIds, roleNames;

		roleIds = [];
		roleNames = [];

		roleFilter = bb.getModuleGroupRoles();
		if (roleFilter) {
			roleGa = new GlideAggregate('sys_group_has_role');
			roleGa.addQuery('group', group.getSysId());
			roleGa.addEncodedQuery(roleFilter);
			roleGa.groupBy('role');
			roleGa.addAggregate('COUNT', 'role');

			roleGa.query();
			while (roleGa.next()) {
				roleIds.push(roleGa.getValue('role'));
				roleNames.push(roleGa.role.name + '');
			}
		}
		log.info('{0} Group {1} role is {2}', vtb.toString(),
				 group.toString(), roleNames.join(','));
		return roleIds;
	}

	function findOwnerSpecificRoleIds(bb, vtb, owner) {
		var roleGa, roleFilter, roleIds, roleNames;

		roleIds = [];
		roleNames = []; // For debug

		roleFilter = bb.getModuleOwnerRoles();
		if (roleFilter) {
			roleGa = new GlideAggregate('sys_user_has_role');
			roleGa.addQuery('user', owner.getSysId());
			roleGa.addEncodedQuery(roleFilter);
			roleGa.groupBy('role');
			roleGa.addAggregate('COUNT', 'role');

			roleGa.query();
			while (roleGa.next()) {
				roleIds.push(roleGa.getValue('role'));
				roleNames.push(roleGa.role.name + '');
			}
		}
		log.info('{0} Owner {1} role is {2}', vtb.toString(),
				 owner.toString(), roleNames.join(','));
		return roleIds;
	}

	function calculateRoleNames(bb, vtb, group, owner) {
		var allRoleIds, staticRoleIds, roleNames, roleGr;

		allRoleIds = [];

		staticRoleIds = bb.getModuleRoles();
		if (staticRoleIds) {
			allRoleIds.concat(staticRoleIds.split(','));
		}
		allRoleIds = allRoleIds.concat(findGroupSpecificRoleIds(bb, vtb, group));
		allRoleIds = allRoleIds.concat(findOwnerSpecificRoleIds(bb, vtb, owner));

		if (allRoleIds.length === 0) {
			log.warn('{0} No roles found for group {1} and owner {2}', 
					 vtb.toString(), group.toString(), owner.toString());
			return '';
		}

		roleNames = [];
		roleGr = new GlideRecord('sys_user_role');
		roleGr.addQuery('sys_id', 'IN', allRoleIds.join(','));
		roleGr.query();
		while (roleGr.next()) {
			roleNames.push(roleGr.getDisplayValue());
		}
		log.info('{0} Roles for group {1} and owner {2}: {3}', bb.toString(),
				 group.toString(), owner.toString(), roleNames.join(','));
		return roleNames.join(',');
	}

	p.synchVtbModule = function synchVtbModule(bb, group, owner) {
		var vtb, boardName, modGr, templateId, template, title, url, updating;

		if (!bb.addToMenu()) return;

		vtb = this;
		boardName = vtb.getGr().getValue('name');
		modGr = new GlideRecord('sys_app_module');
		modGr.addQuery('x_maog_vtbb_board', vtb.getSysId());
		modGr.query();

		if (!modGr.next()) {
			if (!bb.updateExisting()) return;
			modGr.initialize();
			modGr.setNewGuidValue(gs.generateGUID());
			updating = true;
		}

		// Template stopped working.
		if (false) {
			modGr.insert();
			templateId = modGr.getValue('module_template');
			template = GlideTemplate.get(templateId);
			template.apply(modGr);
			modGr.update();
		}

		modGr.setValue('x_maog_vtbb_board', vtb.getSysId());

		modGr.setValue('application', WORK_REQUEST_MENU);

		title = bb.getModuleTitle();
		title = gs.getMessage(title, group.getDisplayValue());
		modGr.setValue('title', title);

		url = bb.getModuleUrl();
		url = gs.getMessage(url, vtb.getSysId());
		modGr.setValue('query', url);

		modGr.setValue('link_type', 'DIRECT');
		modGr.setValue('roles', calculateRoleNames(bb, vtb, group, owner));

		modGr.setValue('order', bb.getModuleOrder());

		log.debug('{0} {1} [Module {2} {3}]', this + '',
				  updating ? 'Updating' : 'Adding',
				  modGr.getUniqueValue(), title);
		modGr.update();
	};

	p.synchVtbBookmark = function synchVtbBookmark(bb, group, user) {
		var vtb, vtbId, vtbGr, userId, bmGr, templateId, template, title, url, updating;

		if (!bb.addToBookmarks()) return;

		vtb = this;
		vtbId = vtb.getSysId();
		vtbGr = vtb.getGr();
		userId = user.getSysId();

		bmGr = new GlideRecord('sys_ui_bookmark');
		bmGr.addQuery('x_maog_vtbb_board', vtbId);
		bmGr.addQuery('user', userId);
		bmGr.query();


		if (!bmGr.next()) {
			bmGr.initialize();
			bmGr.setNewGuidValue(gs.generateGUID());
			updating = true;
		} else if (!bb.updateExisting()) {
			return;
		}

		// Template stopped working.
		if (false) {
			bmGr.insert();
			templateId = bb.getBookmarkTemplate(templateId);
			template = GlideTemplate.get();
			template.apply(bmGr);
			bmGr.update();
		}

		bmGr.setValue('x_maog_vtbb_board', vtbId);
		bmGr.setValue('user', userId);
		bmGr.setValue('pinned', true);
		bmGr.setValue('order', bb.getBookmarkOrder());

		title = bb.getBookmarkTitle();
		title = gs.getMessage(title, group.getDisplayValue());
		bmGr.setValue('title', title);

		url = bb.getBookmarkUrl();
		bmGr.setValue('url', gs.getMessage(url, vtb.getSysId()));

		log.debug('{0} [Bookmark {1} {2}]',
				  updating ? 'updating' : 'adding',
				  bmGr.getUniqueValue(), title);
		bmGr.update();
	};

	// Add lanes to a VTB this Board Builder is building.
	// Precondition: Given this BoardBuilder, a group satisfying
	//  the postconditions for synchBoardBuilderGroups, and a
	//  VTB corresponding to a user meeting this BoardBuilder's
	//  conditions for board ownership,
	// Postcondition: There exists exactly one VtbLane record
	//  for each value (specified by Task Table and Lane Field)
	//  that satisfies this BoardBuilder's Lane Conditions.
	//
	p.synchVtbLanes = function synchVtbLanes(bb, group, owner) {
		VtbLane.synchLanes(bb, this, group, owner);
	};

	// Build the VTB Filter
	p.setVtbFilter = function setVtbFilter(bb, group, owner) {
		var bbGr, vtb, vtbGr, buffer, ownerSysIds = [], filter, query;

		bbGr = bb.getGr();
		vtb = this;
		vtbGr = vtb.getGr();
		buffer = [];

		if (bb.areTasksAssignedToBoardMembers()) {

			// Specify individual board members because
			// the group may have been filtered.
			buffer.push('assigned_toISEMPTY');
			VtbMember.query(
				function memberFiltery(memberGr) {
					memberGr.addQuery('board', vtb.getSysId());
				},
				function memberAction(memberGr) {
					buffer.push('^ORassigned_to=');
					buffer.push(memberSysId);
				}
			);

		} else if (bb.areTasksAssignedToGroupMembers()) {
			buffer.push('assignment_group=');
			buffer.push(group.getSysId());
		}

		filter = bb.getTaskFilter();
		if (filter) {
			if (buffer.length > 0) buffer.push('^');
			buffer.push(filter);
		}

		query = buffer.join('');
		if (false && log.isDebugging()) {
			log.debug('{0} setVtbFilter({1}, {2}, {3})={4}',
					  [bb.toString(), vtb.toString(), group.toString(),
					   owner.toString(), query]);
		}

		vtbGr.setValue('filter', query);
	};

	// Update this VTB.  Assumes VTB values were already set.
	p.synch = function synch(bb, group, owner) {
		var vtb = this;

		VtbMember.synchVtbMembers(bb, vtb, group);

		// Has to happen after members are updated.
		this.setVtbFilter(bb, group, owner);
		this.update();

		log.debug('VtbBoard before VtbLane.synch owner is {0}', owner + '');
		VtbLane.synch(bb, vtb, group, owner);
		log.debug('VtbBoard after VtbLane.synch owner is {0}', owner + '');

		this.synchVtbModule(bb, group, owner);
	};

	// Initialize a VtbBoard record based on this Board Builder.
	//
	// Preconditions: Given this BoardBuilder, a group satisfying
	//  the postconditions for synchBbgs, and a
	//  VTB corresponding to a user meeting this BoardBuilder's
	//  conditions for board ownership,
	// Postconditions: The VTB's values are initialized from
	//  this BoardBuilder's configuration values including the
	//  template and the owner.
	//
	s.setVtbValues = function setVtbValues(vtbGr, bb, group, owner, bbg) { // 1
		var bbId, templateSysId, templateGr, name, filter;

		// Board Template
		GlideTemplate.get(bb.getTemplate()).apply(vtbGr);

		// Substitute group name into name.
		name = vtbGr.getValue('name');
		if (name && name.match(/{\d+}/)) {
			name = gs.getMessage(name, group.getDisplayValue());
		}
		vtbGr.setValue('name', name);

		vtbGr.setValue('x_maog_vtbb_builder', bb.getSysId());
		vtbGr.setValue('x_maog_vtbb_board_builder_group', bbg.getSysId());

		vtbGr.setValue('table', bb.getTaskTable()); // Task Table
		vtbGr.setValue('field', bb.getLaneField()); // Lane Field
		vtbGr.setValue('assignment_group', group.getSysId());
		vtbGr.setValue('owner', owner.getSysId());
	};

	// Create VTBs for a Board Builder Group's eligible owners.
	//
	// Preconditions: Given a Board Builder Group specifying
	//  one Board Builder and one Group that satisfies the
	//  Board Builder's owner group membership conditions
	//  (see BoardBuilderGroup.synchBbgs)
	// Postcondition: There exists one VTB owned by the
	//  user that satisfies the Board Builder's ownership
	//  conditions, with appropriate member and lane
	//  records and lane hiding based on the Board Builder's
	//  constraints.
	//
	s.synchGroupVtbs = function synchGroupVtbs(bb, group, bbg) {
		var bbId, groupId, vtbGr, vtbOnce, updating;
		var ownerUserFilter, ownerRoleIds;

		bbId = bb.getSysId();
		groupId = group.getSysId();
		function makeKey(ownerId) { return [bbId, groupId, ownerId].join('.'); }

		vtbOnce = new Once('vtbOnce');

		// Find the VTBs that already exist for this builder and group.
		VtbBoard.query(
			function filter(vtbGr) {
				vtbGr.addQuery('x_maog_vtbb_builder', bbId);
				vtbGr.addQuery('assignment_group', groupId);
			},
			function process(vtbGr) {
				vtbOnce.exists(vtbGr.getUniqueValue(), makeKey(vtbGr.getValue('owner')));
			}
		);

		// Filter for eligible owners.  Synchronize their vtb records.
		// Create vtb records if they don't already exist.
		ownerUserFilter = bb.getOwnerUserFilter(); // Owner User Filter
		ownerRoleIds = bb.getOwnerRoles();         // Owner Roles
		group.forUsers(
			function vtbOwnerFilter(ownerGr) {
				if (ownerUserFilter) ownerGr.addEncodedQuery(ownerUserFilter);
			}, function eligibleVtb(ownerGr) {
				var owner = new User(ownerGr, GrWrapper.MODE.SHARED);
				vtbOnce.update(
					undefined, makeKey(owner.getSysId()),
					function updateVtb(vtbId, key, state) {
						var vtb, vtbGr, updating;
						updating = (state === Once.STATE.EXISTS);

						if (owner.hasRoleSysIds(ownerRoleIds)) {

							// Get out if not the first time.
							if (state !== Once.STATE.ADDED && !updating) return;

							// Don't update if updateExisting is not on.
							if (updating && !bb.updateExisting()) return;

							vtb = new VtbBoard(vtbId);
							vtbGr = vtb.getGr();
							s.setVtbValues(vtbGr, bb, group, owner, bbg);
							log.info('{0} VTB {1} with owner {2}',
									 (updating ? 'updating' : 'adding'),
									 vtb.getDisplayValue(), owner.getDisplayValue());
							vtb.update();
							vtb.synch(bb, group, owner);
						}
					}
				);
			},
			bb.includeOwnerGroupManager(),
			bb.includeOwnerGroupMembers()
		);

		// Delete redundant VTBS
		if (bb.deleteInvalid()) {
			vtbOnce.removeRemaining(function getBbg(vtbId) {
				return vtbId;
			});
		}
	};

	var PREFS = [
		'.activeAside',
		'.card-details',
		'.compactCards',
		'.hiddenLanes',
		'.showCardInfo',
		'.showCoverImage',
		'.showLabelNames',
		'.showMemberNames',
		'.showQuickPicker',
	];

	// Rather than cleaning up the preferences for just the deleted
	// VTB record, clean up all strays.  The queries are about the
	// same complexity, and this can run asynch.
	s.cleanupUserPreferences = function cleanupUserPreferences() {
		var prefGr, prefOr, vtbIds, prefVtbId, prefName;

		// Get the list of all existing VTB Sys IDs.
		vtbIds = [];
		this.query(
			function noop() {},
			function addVtbId(vtbGr) {
				vtbIds.push(vtbGr.getUniqueValue());
			}
		);

		prefGr = new GlideRecord('sys_user_preference');

		// This prefix is common for all VTB-specific preferences.
		prefGr.addQuery('name', 'STARTSWITH', 'vtb.board.');

		// Limit to the specific suffixes used in VTB-specific preferences.
		PREFS.forEach(function addPrefQuery(name, i) {
			if (i === 0) {
				prefOr = prefGr.addQuery('name', 'ENDSWITH', name);
			} else {
				prefOr.addOrCondition('name', 'ENDSWITH', name);
			}
		});

		// Exclude any preference containing a Sys ID of an existing VTB.
		vtbIds.forEach(
			function excludeVtb(vtbId) {
				prefGr.addQuery('name', 'DOES NOT CONTAIN', vtbId);
			}
		);

		prefGr.query();

		log.debug('Cleaning up {0} user preference records using query: {1}',
				  prefGr.getRowCount(), prefGr.getEncodedQuery());

		if (log.isDebugging()) {
			while (prefGr.next()) {
				log.debug('Removing user preference  ' + prefGr.getValue('name'));
			}
		}
		prefGr.deleteMultiple();
	};

	s.query = function query(filterFn, recordFn) {
		GrWrapper.query(filterFn, recordFn, SPEC);
	};

	return p;
})(VtbBoard);  // End VtbBoard_proto]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>peter.smith</sys_created_by>
        <sys_created_on>2018-06-19 18:09:15</sys_created_on>
        <sys_id>4e639261dbbe9f00898be3a84b961966</sys_id>
        <sys_mod_count>206</sys_mod_count>
        <sys_name>VtbBoard</sys_name>
        <sys_package display_value="Visual Task Board Builder" source="x_maog_vtbb">ae48259bdbee9b00898be3a84b9619f7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Visual Task Board Builder">ae48259bdbee9b00898be3a84b9619f7</sys_scope>
        <sys_update_name>sys_script_include_4e639261dbbe9f00898be3a84b961966</sys_update_name>
        <sys_updated_by>peter.smith</sys_updated_by>
        <sys_updated_on>2018-08-22 20:36:12</sys_updated_on>
    </sys_script_include>
</record_update>
