<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_maog_vtbb.Group</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>Group</name>
        <script><![CDATA[var Group = Class.create();
Group.prototype = (function Group_proto(s) {
	var p = {};
	var TYPE = p.type = 'Group';
	var TABLE = s.TABLE = 'sys_user_group';

	var log = s.log = x_spar2_log.Logger.getLogger(TYPE, gs.getCurrentScopeName());

	var GROUP_TYPE = s.GROUP_TYPE = p.GROUP_TYPE = {};
	function getGroupTypeId(groupTypeName) {
		var gtGr = new GlideRecord('sys_user_group_type');
		if (gtGr.get('name', groupTypeName)) {
			return gtGr.getUniqueValue();
		}
		return null;
	}
	GROUP_TYPE.FAST = getGroupTypeId('fast');
	GROUP_TYPE.FAST_COORDINATOR = getGroupTypeId('fast_coordinator');
	
	var SPEC = { table: TABLE, prefix: 'Group', classFn: s, log: log };

	GrWrapper.mixProto(p);
	p.initialize = function initialize(wrap, mode) {
		new GrWrapper(wrap, mode, SPEC).mixThis(this);
	};

	s.query = function query(filterFn, recordFn) {
		GrWrapper.query(filterFn, recordFn, SPEC);
	};

	p.getManager = function getManager() {
		return new User(this.getGr().manager);
	};

	p.getMemberIds = function getMemberIds(includeManager, includeMembers, mode) {
		var groupGr, mgrId, memberIds;

		groupGr = this.getGr();
		memberIds = [];

		if (includeManager) {
			mgrId = groupGr.getValue('manager');
			if (mgrId) {
				memberIds.push(mgrId);
			}
		}

		if (includeMembers) {
			GroupMember.forGroupUsers(this, function tryMember(member) {
				memberIds.push(member.getSysId());
			}, mode);
		}

		memberIds = memberIds.join(',');
		return memberIds;
	};

	p.forUsers = function forUsers(filterFn, enumFn, includeManager, includeMembers, mode) {
		var group, groupGr, mgrId, userOnce, userIds;

		group = this;
		User.query(function userFilter(userGr) {
			var memberIds = group.getMemberIds(includeManager, includeMembers);
			userGr.addQuery('sys_id', 'IN', memberIds); // Somehow it is set to true
			if (filterFn) filterFn(userGr);
		}, function userBuilder(userGr) {
			enumFn(userGr);
		});
	};

	p.hasGroupType = function hasGroupType(type) {
		var answer = false;
		var groupTypesStr = this.getGr().getValue('type');
		var groupTypes = groupTypesStr.split(',');
		if (groupTypes.indexOf(type) >= 0) {
			answer = true;
		}
		log.debug('hasGroupType({0})={1}: {2}', type, answer, groupTypesStr);
		return answer;
	};

	// Called by BR "Group Updated"
	p.updated = function updated() {
		// For now, invalidate all boards.
		BoardBuilder.invalidateBoardBuilders(true);
	};

	return p;
})(Group);  // End Group_proto]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>peter.smith</sys_created_by>
        <sys_created_on>2018-06-14 22:06:47</sys_created_on>
        <sys_id>09ad1180db361f00898be3a84b96190a</sys_id>
        <sys_mod_count>127</sys_mod_count>
        <sys_name>Group</sys_name>
        <sys_package display_value="Visual Task Board Builder" source="x_maog_vtbb">ae48259bdbee9b00898be3a84b9619f7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Visual Task Board Builder">ae48259bdbee9b00898be3a84b9619f7</sys_scope>
        <sys_update_name>sys_script_include_09ad1180db361f00898be3a84b96190a</sys_update_name>
        <sys_updated_by>peter.smith</sys_updated_by>
        <sys_updated_on>2018-08-09 04:52:19</sys_updated_on>
    </sys_script_include>
</record_update>
