<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_maog_vtbb.RecordWrapper</api_name>
        <client_callable>false</client_callable>
        <description>Mixin to wrap a GlideRecord with an object&#13;
&#13;
Expects the subclass to invoke RecordWrapper.setup while initializing its prototype&#13;
Adds methods to the supplied prototype (p)&#13;
Expects the  subclass to invoke p.set from its constructor&#13;
Adds a recordWrapper property to each instance&#13;
&#13;
Your object can inherit methods by supplying its prototype to the setup method.&#13;
Alternatively, provide a different object to set aside the methods.</description>
        <name>RecordWrapper</name>
        <script><![CDATA[var RecordWrapper = Class.create();
(function RecordWrapper_static(s) {
	var TYPE = 'RecordWrapper';
	var myLog = x_spar2_log.Logger.getLogger(TYPE);

	// When you create a wrapped record it encapsulates a GlideRecord.
	// You can specify that it is private (the default) or shared.
	//
	// SHARED: No extra queries.  Have to stop using it before modifying
	//         the shared GlideRecord.  You must not share a GlideRecord
	//         from a query/next loop unless you will stop using it before
	//         the next iteration.
	//
	// PRIVATE: Requires a query the first time getGr is called.  Does not
	//          get corrupted by saving beyond one iteration of a query/next
	//          loop (for example when returning an array of wrapped records.)
	//
	// For efficiency, use scoping and functional programming to nest activites
	// to conform to the lifespan of a wrapper for a shared GlideRecord.

	var MODE = s.MODE = {};
	MODE.SHARED = true;  // Share the GlideRecord
	MODE.PRIVATE = false; // Private is the default.

	// Call this method while setting up your class.
	//
	// p:      Subclass prototype to expose methods, or private object to hide them.
	// CLASS:  Class object for the subclass.
	// TABLE:  Table the subclass will access.
	// PREFIX: Prefix to use in toString(): [PREFIX SysId DisplayName]

	s.setup = function setup(p, CLASS, TABLE, PREFIX, log) {

		log = log || myLog;

		// Each class needs its own copy of the "static" methods defined in setup
		var rw = {};

		p.MODE = rw.MODE = MODE;

		// Call this from your wrapped class.initialize().
		// Supply a sysId, GlideRecord, or GlideElement.
		p.set = rw.set = function set(wrap, mode, that) {
			var my, sysId, gr, ge, displayValue;
			if (mode === undefined) mode = MODE.PRIVATE;
			my = {};
			if (that) that.recordWrapper = my; // For Script Debugger
			gr = my.gr = ge = my.ge = sysId = my.sysId = null;

			if (wrap === undefined) {
				// New record - leave everything null.
			} else if (typeof wrap === 'string') {
				// SysId only - lazy load if necessary.
				sysId = my.sysId = wrap;
			} else if (typeof wrap === 'object') {
				// GlideElement or GlideRecord
				if (typeof wrap.getUniqueValue === 'function') {
					// GlideRecord
					sysId = my.sysId = wrap.getUniqueValue();
					gr = my.gr = (mode === MODE.SHARED ? wrap : null);
					if (gr) my.displayValue = displayValue = gr.getDisplayValue();
				} else if (typeof wrap.getRefRecord === 'function') {
					// GlideElement
					sysId = my.sysId = wrap.toString();
					ge = my.ge = wrap;
					my.displayValue = displayValue = ge.getDisplayValue();
				}
			} else {
				throw new TypeError('Need a Sys ID, GlideRecord, or GlideElement');
			}
			my.mode = mode;    // For Script Debugger
			my.table = TABLE;  // For Script Debugger

			// Return the SysID.  Does not need to fetch the GlideRecord.
			// If the SysID is blank, initialize a new record.
			p.getSysId = function getSysId() {
				if (!sysId) {
					gr = my.gr = new GlideRecord(TABLE);
					gr.initialize();
					gr.setNewGuidValue(gs.generateGUID());
					sysId = my.sysId = gr.getUniqueValue();
				}
				return sysId;
			};

			p.haveGr = function haveGr() { return !!gr; };

			// Get the GlideRecord in TABLE that matches the supplied Sys ID.
			// Cache the GlideRecord for reuse.
			p.getGr = function getGr() {
				var isNew;

				if (!gr) {
					if (ge) {
						gr = my.gr = ge.getRefRecord();
					} else if (sysId) {
						gr = my.gr = new GlideRecord(TABLE);
						if (gr.get(sysId)) {
							my.displayValue = displayValue = gr.getDisplayValue();
						} else {
							throw new TypeError('No record in ' + TABLE + ' for Sys ID ' + sysId);
						}
					} else {
						this.getSysId(); // Initialize a new record.
					}
					//if (log.isDebugging()) log.debug('{0} loaded', this.toString());
				} else if (gr.sysId && sysId != gr.sys_id) {
					throw new TypeError('RecordWrapper GlideRecord Sys ID Changed');
				}
				return gr;
			};

			p.getDisplayValue = function getDisplayValue() {
				return displayValue; // Undefined until getGr().
			};

			p.toString = function toString() {
				var parts = [];
				parts.push('[');
				parts.push(PREFIX);
				parts.push(' ');
				if (sysId) {
					parts.push(sysId);
				} else {
					parts.push('(new)');
				}
				if (displayValue) {
					parts.push(' ');
					parts.push(displayValue);
				}
				if (mode === MODE.SHARED) {
					parts.push(' (shared)');
				}
				parts.push(']');
				return parts.join('');
			};

			p.update = function update() {
				var gr = this.getGr();
				//if (log.isDebugging()) log.debug('{0} updating', this.toString());
				gr.update();
				if (log.isDebugging()) log.debug('{0} updated', this.toString());
				return this;
			};

			p.insert = function insert() {
				var gr = this.getGr();
				//if (log.isDebugging()) log.debug('{0} inserting', this.toString());
				gr.insert();
				if (log.isDebugging()) log.debug('{0} inserted', this.toString());
				return this;
			};

			p.setForceUpdate = function setForceUpdate(isOn) {
				this.getGr().setForceUpdate(isOn);
			};

			p.getDisplayValue = function getDisplayValue() { 
				var rwGr = this.getGr();
				var dv = rwGr.getDisplayValue();
				return dv; };
			p.getUniqueValue = function getUniqueValue() { return this.getGr().getUniqueValue(); };
			p.setValue = function setValue(n, v) { return this.getGr().setValue(n, v); };
			p.getValue = function getValue(n) { return this.getGr().getValue(n); };

			//if (log.isDebugging()) log.debug('{0} constructed', that.toString());
			return my;
		}; // End setup

		// Apply a filter to a GlideRecord.  The filter could be an
		// encoded query string or a function.  Newer code uses the
		// function.
		function applyFilter(enumGr, filter) {
			if (typeof filter === 'function') {
				filter(enumGr);
			} else if (typeof filter === 'string' && filter
					   || filter === undefined || filter === null) {
				enumGr.addEncodedQuery(filter);
			} else {
				new Incident().
				setShortDescription('Filter must be a function or string').
				setDescription('RecordWrapper.applyFilter was called incorrectly').
				insert(log.isDebugging()).addToErrorLog(log).throwError(TypeError);
			}
		} rw.applyFilter = applyFilter;

		// Assign an empty function a default function value.
		// Create an incident if the input was not falsy or a function.
		function fnSetup(fn, defaultFn) {
			if (!fn) {
				fn = defaultFn;
			}

			if (typeof fn !== 'function') {
				new Incident().
				setShortDescription('Processor must be a function').
				setDescription('RecordWrapper.query was called incorrectly').
				insert(log.isDebugging()).addToErrorLog(log).throwError(TypeError);
			}

			return fn;
		}

		// Set up a filter and run a query.  Return the GlideRecord
		// containing the query (to call .next() on.)
		function querySetup(filter, table) {
			table = table || TABLE;
			var enumGr = new GlideRecord(table);
			enumGr.initialize();

			applyFilter(enumGr, filter);		
			enumGr.query();

			myLog.info('query {0} returned {1} records: {2}',
					   enumGr.getTableName(), enumGr.getRowCount(),
					   enumGr.getEncodedQuery());

			return enumGr;
		}

		// Make a GlideRecord query that calls back for further action.
		//
		// filter: Called before the gr.query() call.
		// recordFn: Called from within the gr.next() loop.
		//
		// In your filter method, add queries to the GlideRecord and
		// make other pre-query adjustments like setting the row limit.
		rw.query = function query(filter, recordFn, table) {
			var records = [], record, enumGr;

			recordFn = fnSetup(recordFn, function(recordGr) {
				return new CLASS(recordGr, MODE.PRIVATE);
			});

			enumGr = querySetup(filter, table);

			while (enumGr.next()) {
				record = recordFn(enumGr);
				if (record) {
					records.push(record);
				}
			}
			return records;
		};

		rw.initRecord = function initRecord(builder) {
			var wrapper = new CLASS();
			var wrapGr = wrapper.getGr();
			if (typeof builder === 'function') {
				builder(wrapGr, wrapper);
			}
			return wrapper;
		};

		rw.createRecord = function createRecord(builder, share) {
			var wrapper = rw.initRecord(builder);
			wrapper.insert();
			return wrapper;
		};

		rw.deleteRecord = function deleteRecord() {
			this.getGr().deleteRecord();
		};

		rw.deleteMultiple = function deleteMultiple(filter) {
			var records = [], record;
			var gr = new GlideRecord(TABLE);

			applyFilter(gr, filter);
			gr.query();
			myLog.info('deleteMultiple {0} {1} {2}', TABLE, gr.getRowCount(), gr.getEncodedQuery());

			gr.deleteMultiple();
			return this;
		};

		return rw;
	}; // End RecordWrapper.setup
})(RecordWrapper); // End RecordWrapper_static]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>peter.smith</sys_created_by>
        <sys_created_on>2018-06-20 01:04:05</sys_created_on>
        <sys_id>c8d53b65db72df00898be3a84b96194e</sys_id>
        <sys_mod_count>151</sys_mod_count>
        <sys_name>RecordWrapper</sys_name>
        <sys_package display_value="Visual Task Board Builder" source="x_maog_vtbb">ae48259bdbee9b00898be3a84b9619f7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Visual Task Board Builder">ae48259bdbee9b00898be3a84b9619f7</sys_scope>
        <sys_update_name>sys_script_include_c8d53b65db72df00898be3a84b96194e</sys_update_name>
        <sys_updated_by>peter.smith</sys_updated_by>
        <sys_updated_on>2018-08-09 02:08:19</sys_updated_on>
    </sys_script_include>
</record_update>
