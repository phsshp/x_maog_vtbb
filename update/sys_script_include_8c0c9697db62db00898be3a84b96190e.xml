<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_maog_vtbb.User</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>User</name>
        <script><![CDATA[var User = Class.create();
User.prototype = (function User_proto(s) {
	var p = {};
	var TYPE = p.type = 'User';
	var TABLE = 'sys_user';

	var log = s.log = x_spar2_log.Logger.getLogger(TYPE, gs.getCurrentScopeName());

	var rw = RecordWrapper.setup(p, s, TABLE, 'User', log);

	var adminRoleSysId = (function() {
		var gr = new GlideRecord('sys_user_role');
		gr.get('name', 'admin');
		return gr.getValue('sys_id');
	})();

	var o_forOwnProperties = Utils.o_forOwnProperties;

	p.initialize = function initialize(grOrSysId, share) {
		rw.set(grOrSysId, share, this);
	};

	p.hasRoleSysIds = function hasRoleSysIds(roleSysIdList){
		var roleSysIdArray, roleSysIdMap, gr, sysId, answer = true;

		roleSysIdArray = roleSysIdList.split(',');

		// Requested roles
		roleSysIdMap = {};
		roleSysIdArray.forEach(function(v) {
			roleSysIdMap[v] = false;
		});

		// Look for admin too.
		roleSysIdArray.push(adminRoleSysId);
		roleSysIdList = roleSysIdArray.join(',');

		// Query for the requested roles
		gr = new GlideRecord('sys_user_has_role');
		gr.addQuery('user', this.getSysId());
		gr.addQuery('role', 'IN', roleSysIdList);
		if (log.isDebugging()) {
			log.debug('{0} query {1}: {2}', this.toString(),
					  gr.getTableName(), gr.getEncodedQuery());
		}
		gr.query();
		if (log.isDebugging()) {
			log.debug('{0} query {1} returned {2} records', this.toString(),
					  gr.getTableName(), gr.getRowCount());
		}
		while (gr.next()) {
			sysId = gr.getValue('role');
			if (sysId === adminRoleSysId) return true;

			roleSysIdMap[sysId] = true;
		}

		o_forOwnProperties(roleSysIdMap, function checkRole(v) {
			if (!v) answer = false;
		});

		return answer;
	};

	// Special case:  Suppose I ask for a role that is not defined, like 'x'.
	// The query will not return a Sys ID for x, so x is simply left out.
	// This would make hasRoleNames('x') return true.
	// To avoid this case, add 00000000000000000000000000000000 to the list of
	// role Sys IDs if any role was undefined.
	//
	s.getSysIdsFromRoleNames = function getSysIdsFromRoleNames(roleNameList) {
		var roleSysIdArray, roleSysIdMap, roleNameMap, name, sysId, gr, nameUndefined;

		roleSysIdMap = {};
		roleNameMap = roleNameList.split(',').reduce(function buildRoleNameMap(acc, v) {
			acc[v] = false;
			return acc;
		}, {});

		gr = new GlideRecord('sys_user_role');
		gr.addQuery('name', 'IN', roleNameList);
		if (log.isDebugging()) {
			log.debug('query {0}: {1}', gr.getTableName(), gr.getEncodedQuery());
		}
		gr.query();
		while (gr.next()) {
			sysId = gr.getUniqueValue();
			name = gr.getValue('name');
			roleSysIdMap[sysId] = name;
			roleNameMap[name] = sysId;
		}

		roleSysIdArray = [];
		o_forOwnProperties(roleSysIdMap, function getId(v, k) {
			roleSysIdArray.push(k);
		});

		o_forOwnProperties(roleNameMap, function getName(v, k) {
			if (!v) {
				log.warn('Role {0} is not defined', k);
				nameUndefined = true;
			}
		});
		if (nameUndefined) {
			roleSysIdArray.push('00000000000000000000000000000000');
		}
		return roleSysIdArray.join(',');
	};

	p.hasRoleNames = function hasRoleNames(roleNameList) {
		return this.hasRoleSysIds(s.getSysIdsFromRoleNames(roleNameList));
	};

	s.query = rw.query;

	return p;
})(User);  // End User_proto]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>peter.smith</sys_created_by>
        <sys_created_on>2018-06-12 18:44:32</sys_created_on>
        <sys_id>8c0c9697db62db00898be3a84b96190e</sys_id>
        <sys_mod_count>99</sys_mod_count>
        <sys_name>User</sys_name>
        <sys_package display_value="Visual Task Board Builder" source="x_maog_vtbb">ae48259bdbee9b00898be3a84b9619f7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Visual Task Board Builder">ae48259bdbee9b00898be3a84b9619f7</sys_scope>
        <sys_update_name>sys_script_include_8c0c9697db62db00898be3a84b96190e</sys_update_name>
        <sys_updated_by>peter.smith</sys_updated_by>
        <sys_updated_on>2018-07-27 02:58:59</sys_updated_on>
    </sys_script_include>
</record_update>
