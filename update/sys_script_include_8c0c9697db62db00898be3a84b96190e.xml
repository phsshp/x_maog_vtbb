<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_maog_vtbb.User</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>User</name>
        <script><![CDATA[var User = Class.create();
User.prototype = (function User_proto(s) {
	var p = {};
	var TYPE = p.type = 'User';
	var TABLE = 'sys_user';

	var rw = RecordWrapper.setup(p, s, TABLE, 'User');

	var ADMIN_ROLE_SYS_ID = (function() {
		var gr = new GlideRecord('sys_user_has_role');
		gr.get('role.name', 'admin');
		return gr.getValue('sys_id');
	})();

	var log = s.log = x_spar2_log.Logger.getLogger(TYPE, gs.getCurrentScopeName());

	var o_forOwnProperties = Utils.o_forOwnProperties;

	p.initialize = function initialize(grOrSysId, share) {
		this.set(grOrSysId, share);
	};

	s.getRoleNamesFromSysIds = function getRoleNamesFromSysIds(sysIds) {
		var roleNames = [];

		if (!sysIds) {
			return '';
		}

		gr = new GlideRecord('sys_user_role');
		gr.addEncodedQuery('sys_idIN' + sysIds);
		gr.query();
		while (gr.next()) {
			roleNames.push(gr.getDisplayValue());
		}
		return roleNames.join(',');
	};

	p.getRoleMap = function getRoleMap() {
		var gr, roleMap;
		
		if (!this.roleMap) {
			roleMap = {};
			gr = new GlideRecord('sys_user_has_role');
			gr.addQuery('user', this.getSysId());
			gr.query();
			while (gr.next()) {
				roleMap[gr.role.getDisplayValue()] = true;
			}
			this.roleMap = roleMap;
		}
		return roleMap;
	};
	
	p.hasRole = function hasRole(roleName) {
		roleMap = this.getRoleMap();
		if (roleMap['admin']) {
			return true;
		}
		return !!roleMap[roleName];
	};

	p.hasRoles = function hasRoles(roleNames) {
		var roleMap = this.getRoleMap();
		if (roleMap['admin']) {
			return true;
		}
		roleNames = roleNames.split(',');
		for (var i = 0; i < roleNames.length; i++) {
			if (!roleMap[roleNames[i]]) {
				return false;
			}
		}
		return true;
	};

	p.findExistingBoards = function findExistingBoards() {
		var userSysId = this.getSysId();
		var vtbs = VtbBoard.query(function(gr) {
			gr.addQuery('user', userSysId);
			gr.addNotNullQuery('x_maog_vtbb_builder');
		});
		return vtbs;
	};

	s.query = rw.query;

	return p;
})(User);  // End User_proto]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>peter.smith</sys_created_by>
        <sys_created_on>2018-06-12 18:44:32</sys_created_on>
        <sys_id>8c0c9697db62db00898be3a84b96190e</sys_id>
        <sys_mod_count>87</sys_mod_count>
        <sys_name>User</sys_name>
        <sys_package display_value="Visual Task Board Builder" source="x_maog_vtbb">ae48259bdbee9b00898be3a84b9619f7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Visual Task Board Builder">ae48259bdbee9b00898be3a84b9619f7</sys_scope>
        <sys_update_name>sys_script_include_8c0c9697db62db00898be3a84b96190e</sys_update_name>
        <sys_updated_by>peter.smith</sys_updated_by>
        <sys_updated_on>2018-07-04 18:59:49</sys_updated_on>
    </sys_script_include>
</record_update>
