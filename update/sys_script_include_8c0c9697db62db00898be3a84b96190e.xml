<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_maog_vtbb.User</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>User</name>
        <script><![CDATA[var User = Class.create();
User.prototype = (function User_proto(s) {
	var p = {};
	var TYPE = p.type = 'User';
	var TABLE_NAME = 'sys_user';

	var log = x_spar2_log.Logger.getLogger(TYPE, gs.getCurrentScopeName());

	var a_forEach = Utils.a_forEach;
	var o_forOwnProperties = Utils.o_forOwnProperties;

	var adminRoleSysId = (function() {
		var gr = new GlideRecord('sys_user_has_role');
		gr.get('role.name', 'admin');
		return gr.getValue('sys_id');
	})();

	p.initialize = function initialize(grOrSysId) {
		var myGr, mySysId;
		var that = this;

		if (typeof grOrSysId === 'string') {
			mySysId = grOrSysId;
		} else {
			myGr = grOrSysId;
			mySysId = myGr.getUniqueValue();
			that.gr = myGr;
		}

		that.sysId = mySysId;
		that.tableName = TABLE_NAME;

		function getGr() {
			if (!myGr) {
				myGr = new GlideRecord(TABLE_NAME);
				myGr.get(mySysId);
				that.gr = myGr;
			}
			return myGr;
		}
		that.getGr = getGr;

		that.getSysId = function() { return mySysId; };
		
		function toString() {
			return '[User ' + mySysId + (myGr ? myGr.getDisplayValue() : '') + ']';
		}

		function getHasRolesQuery(gr, roleClause, fieldName, adminValue) {
			var roles, or, i, answer = true;

			roles = roleClause.split(',');
			if (roles.indexOf(adminValue) < 0) {
				roles.push(adminValue);
			}

			gr.addQuery('user', mySysId);
			or = gr.addQuery(fieldName, roles[0]);
			for (i = 1; i < roles.length; i++) {
				or.addOrCondition(fieldName, roles[i]);
			}
			log.debug('Query: {0}', gr.getEncodedQuery());
			return roles;
		} that.getHasRolesQuery = getHasRolesQuery;

		function dotWalk(gr, path) {
			var v = gr;
			var a = path.split('.');
			for (var i = 0; i < a.length; i++) {
				v = v[a[i]];
			}
			return v;
		}
		
		function hasRoles(roleClause, fieldName, adminValue) {
			var gr, roles, role, roleMap = {};

			gr = new GlideRecord('sys_user_has_role');
			roles = getHasRolesQuery(gr, roleClause, fieldName, adminValue);
			gr.query();

			while (gr.next()) {
				role = dotWalk(gr, fieldName) + '';
				if (role === adminValue) return true;
				log.debug('Found role {0} {1}', gr.role.sys_id, gr.role.name);
				roleMap[role] = true;
			}

			for (var i = 0; i < roles.length; i++) {
				if (!roleMap[roles[i]] && roles[i] !== adminValue) {
					return false;
				}
			}
			return true;
		}

		that.hasRoleNames = function hasRoleNames(roleClause) {
			return hasRoles(roleClause, 'role.name', 'admin');
		};

		that.hasRoleSysIds = function hasRoleSysIds(roleClause) {
			return hasRoles(roleClause, 'role', adminRoleSysId);
		};

		function getGroupSysIds() {
			return GroupMember.getUsersGroupSysIds(mySysId);
		} that.getGroupSysIds = getGroupSysIds;

	};  // End initialize

	s.queryUsers = function queryUsers(encodedQuery) {
		var users = [];

		var gr = new GlideRecord(TABLE_NAME);
		gr.addEncodedQuery(encodedQuery);
		gr.query();
		while (gr.next()) {
			users.push(new User(gr.getUniqueValue()));
		}
		return users;
	};


	return p;
})(User);  // End User_proto]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>peter.smith</sys_created_by>
        <sys_created_on>2018-06-12 18:44:32</sys_created_on>
        <sys_id>8c0c9697db62db00898be3a84b96190e</sys_id>
        <sys_mod_count>50</sys_mod_count>
        <sys_name>User</sys_name>
        <sys_package display_value="Visual Task Board Builder" source="x_maog_vtbb">ae48259bdbee9b00898be3a84b9619f7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Visual Task Board Builder">ae48259bdbee9b00898be3a84b9619f7</sys_scope>
        <sys_update_name>sys_script_include_8c0c9697db62db00898be3a84b96190e</sys_update_name>
        <sys_updated_by>peter.smith</sys_updated_by>
        <sys_updated_on>2018-06-18 15:28:32</sys_updated_on>
    </sys_script_include>
</record_update>
