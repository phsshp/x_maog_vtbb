<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_maog_vtbb.BoardBuilder</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>BoardBuilder</name>
        <script><![CDATA[var BoardBuilder = Class.create();
BoardBuilder.prototype = (function BoardBuilder_proto(s) {
	var p = {};
	var TYPE = p.type = 'BoardBuilder';
	var TABLE = s.TABLE = 'x_maog_vtbb_board_builder';

	var log = s.log = x_spar2_log.Logger.getLogger(TYPE, gs.getCurrentScopeName());

	var o_forOwnProperties = Utils.o_forOwnProperties;

	var rw = RecordWrapper.setup(p, s, TABLE, 'BB');

	p.initialize = function initialize(grOrSysId, share) {
		this.set(grOrSysId, share);
	};  // End initialize

	p.getUserFilter = function getUserFilter() { return this.getGr().getValue('user_filter'); };

	p.getState = function getState() { return this.getGr().getValue('state'); };

	p.isActive = function isActive() {
		var gr = this.getGr();
		var answer = Utils.getGlideTrueFalse(gr, 'active');
		return answer;
	};

	p.getRequiredRoleNames = function getRequiredRoleNames() { // 1
		var gr, roleSysIds, roleNames = [];

		return User.getRoleNamesFromSysIds(this.getGr().getValue('user_roles'));
	};

	// Set active flag based on current state.
	// Called by BR Board Builder Active Flag.
	p.setActive = function setActive() { // 1
		var myGr = this.getGr();
		var state = myGr.getValue('state');
		var active = (state === 'Operational') ? true : false;
		myGr.setValue('active', active);
		if (log.isDebugging()) log.debug(
			'{0} set active to {1} for State={2}',
			this + '', active, myGr.getDisplayValue('state'));
		return active;
	};

	p.getGroupTypes = function getGroupTypes() { // 1
		var groupTypesStr = this.getGr().getValue('group_types');
		var groupTypesSort = groupTypesStr.split(',').sort();
		return groupTypesSort;
	};

	// The group must have all the group types in this Board
	// Builder's Group Types field.  It also must match the
	// group filter.
	p.setGroupQueryString =  function setGroupQueryString(gr) { // 1
		var bbGroupTypes, bbGroupTypesLen, groupQuery;

		bbGroupTypes = this.getGroupTypes();
		bbGroupTypesLen = bbGroupTypes.length;
		for (var bbti = 0; bbti < bbGroupTypesLen; bbti++) {
			gr.addQuery('type', 'LIKE', bbGroupTypes[bbti]);
		}
		groupQuery = this.getGr().getValue('group_filter');
		gr.addEncodedQuery(groupQuery);
	};

	// Precondition:   Given this BoardBuilder
	// Postcondition:  For every Group,
	//  one BoardBuilderGroup record associates the Group and BoardBuilder
	//  iff the Group satisfies the BoardBuilder's group conditions.
	p.synchBoardBuilderGroups = function synchBoardBuilderGroups(rebuild) { // 1
		var bb = this;
		var groupMap = {};
		var deleteIds = [];
		var EXISTS = 1, MATCHED = 2;

		if (log.isDebugging()) {
			log.debug('{0} synchBoardBuilderGroups({1})', this.toString(), rebuild);
		}

		// Get existing builder groups that reference this board builder.
		// Add their Sys IDs to the bbgGroupMap.
		BoardBuilderGroup.query(function filter(gr) {
			gr.addQuery('board_builder', bb.getSysId());
		}, function process(bbgGr) {
			groupMap[bbgGr.getValue('group')] = {
				status: EXISTS,
				bbg: new BoardBuilderGroup(bbgGr.getValue('sys_id'))
			};
		});

		// Synch every Group that satisfies this Board Builder's
		// Group conditions.
		Group.query(function filter(gr) {
			bb.setGroupQueryString(gr);
		}, function process(gr) {
			var groupSysId = gr.getUniqueValue();
			var v = groupMap[groupSysId];
			if (v && v.status === EXISTS) {
				if (rebuild) {
					if (log.isDebugging()) log.debug('{0} rebuild', v.bbg.toString());
					v.bbg.synch(true);
				} else {
					if (log.isDebugging()) log.debug('{0} matched', v.bbg.toString());
				}
				v.status = MATCHED;
			} else {
				BoardBuilderGroup.createRecord(groupSysId, bb.getSysId());
			}
		});

		o_forOwnProperties(groupMap, function(v, k) {
			if (v.status === EXISTS) {
				if (log.isDebugging()) log.debug('{0} matched', v.bbg.toString());
				deleteIds.push(k);
			}
		});

		if (deleteIds.length > 0) {
			Group.deleteMultiple(function filter(gr) {
				gr.addQuery('sys_id', 'IN', deleteIds.join(','));
			});
		}
	};

	// Add members to a VTB this Board Builder is building.
	p.synchVtbMembers = function synchVtbMembers(vtb, group) {
		var bbGr, members, filter;

		bbGr = this.getGr();

		if (bbGr.getValue('members') === 'Include') {
			filter = bbGr.getValue('member_filter');
			members = group.getUsers(filter);
		}
		if (bbGr.getValue('manager') === 'Include') {
			members.push(group.getManager());
		}

		members.forEach(function(member) {
			VtbMember.createRecord(function(gr) {
				gr.board = vtb.getSysId();
				gr.user = member.getSysId();
			});
		});
	};

	// Add lanes to a VTB this Board Builder is building.
	p.synchVtbLanes = function synchVtbLanes(vtb, group) {

	};

	// Set values in a VTB GlideRecord based on the Board Builder
	// definition.
	p.setVtbValues = function setVtbValues(vtbGr, group, owner) { // 1
		var bbGr, bbSysId, templateSysId, templateGr, name;

		bbGr = this.getGr();
		bbSysId = this.getSysId();

		templateSysId = bbGr.getValue('template');
		templateGr = GlideTemplate.get(templateSysId);
		templateGr.apply(vtbGr);

		name = vtbGr.getValue('name');
		if (name.match(/{\d+}/)) {
			name = gs.getMessage(name, group.getDisplayValue());
		}

		gr.setValue('x_maog_vtbb_builder', bbSysId);
		gr.setValue('x_maog_vtbb_template', bbGr.getValue('template'));

		gr.setValue('owner', owner.getSysId());
		gr.setValue('assignment_group', group.getSysId());
		gr.setValue('table', bbGr.getValue('table'));
		gr.setValue('field', bbGr.getValue('field'));
		gr.setValue('filter', bbGr.getValue('board_filter'));
	};

	p.createVtbRecord = function createVtbRecord(vtb, group, owner) {
		VtbMember.createRecord(function createVtb(gr) {
			this.setVtbValues(gr, group, owner);
		});
		this.synchVtbMembers(vtb, group);
		this.synchVtbLanes(vtb, group);
		return vtb;
	};

	// Given this Board Builder, a group, and an owner, make
	// the owner has a copy of this Board Builder's task board.
	p.synchVtbRecord = function synchVtbRecord(group, owner) { // 1
		var members, that, vtbs;
		that = this;

		// Look for a matching board.
		vtbs = VtbBoard.query(function filter(gr) {
			gr.addQuery('x_maog_vtbb_builder', this.getSysId());
			gr.addQuery('assignment_group', group.getSysId());
			gr.addQuery('owner', owner.getSysId());
			gr.setLimit(2);
		});

		// If not found,c reate it.
		if (vtbs.length === 0) {
			this.createVtbRecord(group, owner);
		}

		// Catch duplicate records.
		if (vtbs.length > 1) {
			new Incident().
			setShortDescription('Duplicate VTB Records').
			setDescription('Query: {0}\nBuilder: {1}\nGroup: {2}\nOwner: {3}\n',
						   [gr.getEncodedQuery(), this.toString(),
							group.toString(), owner.toString()]).
			insert(log.isDebugging()).addToErrorLog(log).throwError();
		}
	};

	s.setLaneFilter = function setLaneFilter(gr) {  // 0
		var query, regexp, bbSysId, bb;

		// Find the board.  All the Sys IDs in the list point to the same board.
		query = current.getEncodedQuery();
		regexp = /sys_idIN([a-fA-F0-9]*)/.exec(query);
		if (regexp) boardSysId = regexp[1];
		if (bbSysId.length === 32) {
			bb = new BoardBuilder(bbSysId);
		}
	};

	p.updated = function updated() {
		var rebuild;

		// TODO: Decide whether we should rebuild when the builder
		// configuration changes.  Currently we do not.
		
		if (log.isDebugging()) log.debug('{0} record updated');
		this.synchBoardBuilderGroups(rebuild);
	};

	return p;
})(BoardBuilder);  // End BoardBuilder_proto]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>peter.smith</sys_created_by>
        <sys_created_on>2018-06-12 18:31:44</sys_created_on>
        <sys_id>f6195ad3db62db00898be3a84b961938</sys_id>
        <sys_mod_count>186</sys_mod_count>
        <sys_name>BoardBuilder</sys_name>
        <sys_package display_value="Visual Task Board Builder" source="x_maog_vtbb">ae48259bdbee9b00898be3a84b9619f7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Visual Task Board Builder">ae48259bdbee9b00898be3a84b9619f7</sys_scope>
        <sys_update_name>sys_script_include_f6195ad3db62db00898be3a84b961938</sys_update_name>
        <sys_updated_by>peter.smith</sys_updated_by>
        <sys_updated_on>2018-07-06 02:59:53</sys_updated_on>
    </sys_script_include>
</record_update>
