<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_maog_vtbb.BoardBuilder</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>BoardBuilder</name>
        <script><![CDATA[var BoardBuilder = Class.create();
BoardBuilder.prototype = (function BoardBuilder_proto(s) {
	var p = {};
	var TYPE = p.type = 'BoardBuilder';
	var TABLE = s.TABLE = 'x_maog_vtbb_board_builder';

	var log = s.log = x_spar2_log.Logger.getLogger(TYPE);

	x_maog_vtbb.RecordWrapper.setup(p, TABLE, 'BB');

	p.initialize = function initialize(grOrSysId) {
		this.set(grOrSysId);
	};  // End initialize

	var a_forEach = Utils.a_forEach;
	var o_forOwnProperties = Utils.o_forOwnProperties;

	p.getUserFilter = function getUserFilter() { return this.getGr().getValue('user_filter'); };
	p.getUserRoleSysIds = function getUserRoleSysIds() { return this.getGr().getValue('user_roles'); };
	p.getState = function getState() { return this.getGr().getValue('state'); };

	p.isActive = function isActive() {
		var gr = this.getGr();
		var answer = Utils.getGlideTrueFalse(gr, 'active');
		if (log.isDebugging()) {
			log.debug('{0} active={1}', this + '', answer);
		}
		return answer;
	};

	// Set active flag based on current state.
	// Called by BR Board Builder Active Flag.
	p.setActive = function setActive() {
		var myGr = this.getGr();
		var state = myGr.getValue('state');
		var active = (state === 'Operational') ? true : false;
		myGr.setValue('active', active);
		if (log.isDebugging()) log.debug(
			'{0} set active to {1} for State={2}',
			this + '', active, myGr.getDisplayValue('state'));
		return active;
	};

	p.getGroupTypes = function getGroupTypes() {
		var groupTypesStr = this.getGr().getValue('group_types');
		var groupTypesSort = groupTypesStr.split(',').sort();
		return groupTypesSort;
	};

	p.getGroupQueryString =  function getGroupQueryString() {
		var qs;
		var bbGroupTypes = this.getGroupTypes(); 
		var bbGroupTypesLen = bbGroupTypes.length;

		var query = [];
		for (var bbti = 0; bbti < bbGroupTypesLen; bbti++) {
			query.push('typeLIKE');
			query.push(bbGroupTypes[bbti]);
			query.push('^');
		}
		query.push(this.getGr().getValue('group_filter'));

		qs = query.join('');
		return qs;
	};

	// Find VTBs that reference this board.
	p.getReferencingVtbs = function getReferencingVtbs(additionalFilter) {
		var filter, gr, vtb, vtbs = [];

		filter = 'x_maog_vtbb_builder=' + this.getSysId();
		vtbs = VtbBoard.query(filter);
		if (log.isDebugging()) {
			log.debug('{0} getReferencingVtbs {1}', this + '',
					  RecordWrapper.arrayToString(vtbs));
		}
		return vtbs;
	};

	// Associate groups with this board builder based on its conditions.
	p.updateGroups = function updateGroups() {
		var bbgs, groups;
		var bbgGroupMap = {};

		if (log.isDebugging()) log.debug('{0} updateGroups()', this + '');

		// Get board builder groups that reference this board builder.
		bbgs = BoardBuilderGroup.findGroupsForBoardBuilder(this);

		// Create a map with the board builder's group SysId as key.
		a_forEach(bbgs, function(bbg) {
			bbgGroupMap[bbg.getGroup().getSysId()] = bbg;
		});

		// Add groups that aren't already linked.  Remove every
		// group encountered from the group map.  That leaves
		// the ones that shouldn't exist in the map.
		if (this.isActive()) {
			groups = Group.queryGroups(this.getGroupQueryString());
			a_forEach(groups, function(group) {
				var groupSysId = group.getSysId();
				if (!bbgGroupMap[groupSysId]) {
					BoardBuilderGroup.addRecord(this.getSysId(), groupSysId);
				}
				delete bbgGroupMap[groupSysId];
			});
		}

		// Delete the entries that should no longer be there.
		o_forOwnProperties(bbgGroupMap, function(bbg) {
			bbg.deleteRecord();
		});

	};

	p.addBoard = function addBoard(group, user) {
		var bbGr, members;
		var that = this;
		
		log.debug('{0} addBoard({1}, {2})', this + '', group + '', user + '');

		bbGr = this.getGr();
		var vtb = VtbBoard.create(function(vtbGr) {
			var templateSysId = bbGr.getValue('template');
			var templateGr = GlideTemplate.get(templateSysId);
			templateGr.apply(vtbGr);
			vtbGr.setValue('owner', user.getSysId());
			vtbGr.setValue('assignment_group', group.getSysId());
			vtbGr.setValue('x_maog_vtbb_builder', that.getSysId());
			vtbGr.setValue('x_maog_vtbb_template', bbGr.getValue('template'));
			vtbGr.setValue('table', bbGr.getValue('table'));
			vtbGr.setValue('field', bbGr.getValue('field'));
			vtbGr.setValue('filter', bbGr.getValue('board_filter'));
		});
		
		// TODO: Add Members
		members = this.addBoardMembers(group, user);
		
		
		
		
		
		
		
		
		
		
		// TODO: Add Lanes
		return vtb;
	};

	return p;
})(BoardBuilder);  // End BoardBuilder_proto]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>peter.smith</sys_created_by>
        <sys_created_on>2018-06-12 18:31:44</sys_created_on>
        <sys_id>f6195ad3db62db00898be3a84b961938</sys_id>
        <sys_mod_count>125</sys_mod_count>
        <sys_name>BoardBuilder</sys_name>
        <sys_package display_value="Visual Task Board Builder" source="x_maog_vtbb">ae48259bdbee9b00898be3a84b9619f7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Visual Task Board Builder">ae48259bdbee9b00898be3a84b9619f7</sys_scope>
        <sys_update_name>sys_script_include_f6195ad3db62db00898be3a84b961938</sys_update_name>
        <sys_updated_by>peter.smith</sys_updated_by>
        <sys_updated_on>2018-06-25 14:16:23</sys_updated_on>
    </sys_script_include>
</record_update>
