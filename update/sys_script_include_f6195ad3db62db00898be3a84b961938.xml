<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_maog_vtbb.BoardBuilder</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>BoardBuilder</name>
        <script><![CDATA[var BoardBuilder = Class.create();
BoardBuilder.prototype = (function BoardBuilder_proto(s) {
	var p = {};
	var TYPE = p.type = 'BoardBuilder';
	var TABLE = s.TABLE = 'x_maog_vtbb_board_builder';

	// Some activities are similar for ownership and membership.
	// Support reuse with these constants.
	var USER_TYPE = s.USER_TYPE = p.USER_TYPE = {};
	USER_TYPE.OWNERS = 'Owner';
	USER_TYPE.MEMBERS = 'Member';
	USER_TYPE.USERS = 'User';

	var log = s.log = x_spar2_log.Logger.getLogger(TYPE, gs.getCurrentScopeName());

	var o_forOwnProperties = Utils.o_forOwnProperties;

	var SPEC = { table: TABLE, prefix: 'BB', classFn: s, log: log };

	GrWrapper.mixProto(p);
	p.initialize = function initialize(wrap, mode) {
		new GrWrapper(wrap, mode, SPEC).mixThis(this);
	};

	p.applyTemplate = function applyTemplate(rw, fieldName) {
		GlideTemplate.get(this.getGr().getValue(fieldName)).apply(this.getGr());
	};

	// Header
	p.getName = function getName() { return this.getGr().getValue('name'); };
	p.getState = function getState() { return this.getGr().getValue('state'); };
	p.isActive = function isActive() { return Utils.getGlideTrueFalse(this.getGr(), 'active'); };
	p.getDisplayName = function getDisplayName() { return this.getGr().getValue('sys_name'); };

	// Board Definition
	p.getTaskTable = function getTaskTable() { return this.getGr().getValue('table'); };
	p.getLaneField = function getLaneField() { return this.getGr().getValue('field'); };
	p.getTemplate = function getTemplate() { return this.getGr().getValue('template'); };
	p.getDescription = function getDescription() { return this.getGr().getValue('description'); };
	p.updateExisting = function updateExisting() { return Utils.getGlideTrueFalse(this.getGr(), 'update_existing'); };
	p.deleteInvalid = function deleteInvalid() { return Utils.getGlideTrueFalse(this.getGr(), 'delete_invalid'); };


	// Tasks
	p.areTasksAssignedToBoardMembers = function areTasksAssignedToBoardMembers() {
		return this.getGr().getValue('task_assigned_to') === 'board_members';
	};
	p.areTasksAssignedToGroupMembers = function areTasksAssignedToGroupMembers() {
		return this.getGr().getValue('task_assigned_to') === 'group_members';
	};
	p.getTaskFilter = function getTaskFilter() { return this.getGr().getValue('board_filter'); };

	// Owners
	p.getGroupTypes = function getGroupTypes() { return this.getGr().getValue('owner_group_types').split(',').sort(); };
	p.includeOwnerGroupMembers = function includeOwnerGroupMembers() {
		return this.getGr().getValue('owner_group_members') === 'include';
	};
	p.getOwnerRoles = function getOwnerRoles() { return this.getGr().getValue('owner_roles'); };
	p.includeOwnerGroupManager = function includeOwnerGroupManager() {
		return this.getGr().getValue('owner_group_manager') === 'include';
	};
	p.getOwnerGroupFilter = function getOwnerGroupFilter() { return this.getGr().getValue('owner_group_filter'); };
	p.getOwnerUserFilter = function getOwnerUserFilter() { return this.getGr().getValue('owner_user_filter'); };

	// Members
	p.getMemberRoles = function getMemberRoles() { return this.getGr().getValue('member_roles'); };
	p.includeMemberGroupMembers = function includeMemberGroupMembers() {
		return this.getGr().getValue('member_group_members') === 'include';
	};
	p.includeMemberGroupManager = function includeMemberGroupManager() {
		return this.getGr().getValue('member_group_manager') === 'include';
	};
	p.getMemberGroupFilter = function getMemberGroupFilter() { return this.getGr().getValue('member_group_filter'); };
	p.getMemberUserFilter = function getMemberUserFilter() { return this.getGr().getValue('member_user_filter'); };

	// Users
	p.getUserRoles = function getUserRoles() { return this.getGr().getValue('user_roles'); };
	p.includeUserGroupMembers = function includeUserGroupMembers() {
		return this.getGr().getValue('user_group_members') === 'include';
	};
	p.includeUserGroupManager = function includeUserGroupManager() {
		return this.getGr().getValue('user_group_manager') === 'include';
	};
	p.getUserMemberFilter = function getUserMemberFilter() { return this.getGr().getValue('user_member_filter'); };
	p.getUserGroupFilter = function getUserGroupFilter() { return this.getGr().getValue('user_group_filter'); };
	p.getUserUserFilter = function getUserUserFilter() { return this.getGr().getValue('user_user_filter'); };

	// Lanes
	p.showUnassignedLane = function showUnassignedLane() { return Utils.getGlideTrueFalse(this.getGr(), 'unassigned_lane'); };
	p.getUnassignedLaneLabel = function getUnassignedLaneLabel() { return this.getGr().getValue('unassigned_lane_label'); };
	p.showOwnerLane = function showOwnerLane() { return Utils.getGlideTrueFalse(this.getGr(), 'owner_lane'); };
	p.showManagerLane = function showManagerLane() { return Utils.getGlideTrueFalse(this.getGr(), 'manager_lane'); };
	p.showBoardMemberLanes = function showBoardMemberLanes() { return Utils.getGlideTrueFalse(this.getGr(), 'board_member_lanes'); };
	p.showGroupMemberLanes = function showGroupMemberLanes() { return Utils.getGlideTrueFalse(this.getGr(), 'group_member_lanes'); };

	// Visibility
	p.isUnassignedVisible = function isUnassignedVisible() {return Utils.getGlideTrueFalse(this.getGr(), 'unassigned_visible'); };
	p.isUserVisible = function isUserVisible() { return Utils.getGlideTrueFalse(this.getGr(), 'user_visible'); };
	p.isOwnerVisible = function isOwnerVisible() { return Utils.getGlideTrueFalse(this.getGr(), 'owner_visible'); };
	p.isManagerVisible = function isManagerVisible() { return Utils.getGlideTrueFalse(this.getGr(), 'manager_visible'); };
	p.areBoardMembersVisible = function areBoardMembersVisible() { return Utils.getGlideTrueFalse(this.getGr(), 'board_members_visible'); };
	p.areGroupMembersVisible = function areGroupMembersVisible() { return Utils.getGlideTrueFalse(this.getGr(), 'group_members_visible'); };

	// Navigation
	p.addToMenu = function addToMenu() { return Utils.getGlideTrueFalse(this.getGr(), 'add_to_menu'); };
	p.getModuleTemplate = function getModuleTemplate() { return this.getGr().getValue('module_template'); };
	p.getModuleTitle = function getModuleTitle() { return this.getGr().getValue('module_title'); };
	p.getModuleUrl = function getModuleUrl() { return this.getGr().getValue('module_url'); };
	p.getModuleOrder = function getModuleOrder() { return this.getGr().getValue('module_order'); };
	p.getModuleGroupRoles = function getModuleGroupRoles() { return this.getGr().getValue('module_group_roles'); };
	p.getModuleOwnerRoles = function getModuleOwnerRoles() { return this.getGr().getValue('module_owner_roles'); };
	p.getModuleRoles = function getModuleRoles() { return this.getGr().getValue('module_roles'); };
	p.addToBookmarks = function addToBookmarks() { return Utils.getGlideTrueFalse(this.getGr(), 'add_to_bookmarks'); };
	p.getBookmarkTemplate = function getBookmarkTemplate() { return this.getGr().getValue('bookmark_template'); };
	p.getBookmarkTitle = function getBookmarkTitle() { return this.getGr().getValue('bookmark_title'); };
	p.getBookmarkUrl = function getBookmarkUrl() { return this.getGr().getValue('bookmark_url'); };
	p.getBookmarkOrder = function getBookmarkOrder() { return this.getGr().getValue('bookmark_order'); };

	p.invalidate = function invalidate(update) {
		var bbGr = this.getGr();
		bbGr.setValue('invalidated', gs.hoursAgo(0));
		if (update) {
			bbGr.update();
		}
	};

	s.invalidateBoardBuilders = function invalidateBoardBuilders(update) {
		s.query(
			function allActiveBoards(bbGr) {
				bbGr.addActiveQuery();
			},
			function invalidateBoard(bbGr) {
				var bb = new BoardBuilder(bbGr, GrWrapper.MODE.SHARED);
				bb.invalidate(update);
			}
		);
	};

	// Invoked when BR "Board Builder Updated" detects a change with
	// potential impact on ownership, membership, lanes, etc.
	//
	p.updated = p.synch = function synchBoardBuilder() {
		log.info('{0} synchronizing', this.toString());
		VtbUpdater.calculating(this);
		BoardBuilderGroup.synchBbgs(this);
	};

	// Set active flag based on current state.
	//
	// Called by BR "Board Builder Active Flag"
	//
	p.setActive = function setActive() { // 1
		var myGr = this.getGr();
		var state = this.getState();
		var active = (state === 'Operational') ? true : false;
		myGr.setValue('active', active);
		log.info('{0} set active to {1} for State={2}', this.toString(),
				 myGr.getValue('active'), myGr.getValue('state'));
		return active;
	};

	s.query = function query(filterFn, recordFn) {
		GrWrapper.query(filterFn, recordFn, SPEC);
	};

	return p;
})(BoardBuilder);  // End BoardBuilder_proto]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>peter.smith</sys_created_by>
        <sys_created_on>2018-06-12 18:31:44</sys_created_on>
        <sys_id>f6195ad3db62db00898be3a84b961938</sys_id>
        <sys_mod_count>379</sys_mod_count>
        <sys_name>BoardBuilder</sys_name>
        <sys_package display_value="Visual Task Board Builder" source="x_maog_vtbb">ae48259bdbee9b00898be3a84b9619f7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Visual Task Board Builder">ae48259bdbee9b00898be3a84b9619f7</sys_scope>
        <sys_update_name>sys_script_include_f6195ad3db62db00898be3a84b961938</sys_update_name>
        <sys_updated_by>peter.smith</sys_updated_by>
        <sys_updated_on>2018-08-09 04:50:34</sys_updated_on>
    </sys_script_include>
</record_update>
