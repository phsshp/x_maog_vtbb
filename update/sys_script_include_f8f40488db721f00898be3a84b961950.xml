<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_maog_vtbb.BoardBuilderGroup</api_name>
        <client_callable>false</client_callable>
        <description>Optimizes queries to manage groups of boards</description>
        <name>BoardBuilderGroup</name>
        <script><![CDATA[var BoardBuilderGroup = Class.create();
BoardBuilderGroup.prototype = (function BoardBuilderGroup_proto(s) {
	var p = {};
	var TYPE = p.type = 'BoardBuilderGroup';
	var TABLE = 'x_maog_vtbb_board_builder_group';

	var EXISTS = 1, MATCHED = 2;

	var log = s.log = x_spar2_log.Logger.getLogger(TYPE, gs.getCurrentScopeName());
	var rw = RecordWrapper.setup(p, s, TABLE, 'BBG', log);

	var call = Function.prototype.call;

	s.query = rw.query;

	p.initialize = function initialize(grOrSysId, share) {
		this.set(grOrSysId, share, this);
	};

	// Add a new link between a board builder and a group.
	s.createRecord = function createRecord(bb, group) {
		var bbg = rw.createRecord(
			function createBbg(bbgGr) {
				bbgGr.setValue('board_builder', bb.getSysId());
				bbgGr.setValue('group', group.getSysId());
			}
		);
		return bbg;
	};

	p.getBoardBuilder = function getBoardBuilder() {
		return new BoardBuilder(this.getGr().board_builder);
	};

	p.getGroup = function getGroup() {
		return new Group(this.getGr().group);
	};

	// Update BoardBuilderGroups to match one BoardBuilder.
	//
	// Called indirectly by BR "Board Builder Updated"
	//
	// Note that a BoardBuilderGroup record is NEVER updated.
	// It is created or deleted and otherwise remains constant.
	// Modifying its references is not a valid test.
	//
	// Also note that business rules react to creation or deletion
	// of a BoardbuilderGroup.
	//
	// Precondition:   Given one BoardBuilder
	// Postcondition:  For this board and every Group
	//  that satisfies the BoardBuilder's ownership conditions
	//  there exists exactly one BoardBuilderGroup record
	//  associating the BoardBuilder and the Group.
	//
	s.synchBbgs = function synchBbgs(bb) {
		var bbSysId = bb.getSysId();
		var groupMap = {};
		var deleteIds = [];
		var EXISTS = 1, MATCHED = 2;
		var bbgOnce = new Once('bbgOnce');

		function bbgKey(groupId) { return bbSysId + '.' + groupId; }

		// Get existing builder groups that reference this board builder.
		// Add their Sys IDs to the bbgGroupMap.
		BoardBuilderGroup.query(
			function bbgFilter(bbgGr) {
				bbgGr.addQuery('board_builder', bbSysId);
			}, 
			function existingBbg(bbgGr) {
				var key, value;

				key = bbgKey(bbgGr.getValue('group'));
				value = bbgGr.getUniqueValue();
				bbgOnce.exists(value, key);
			});

		// Synch every BBG that satisfies this Board Builder's
		// Group conditions.  Create new BBGs as needed.
		// If updateExisting is on, synch existing BBGs as well
		Group.query(
			function groupFilter(groupGr) {
				var bbGroupTypes, bbGroupTypesLen, groupQuery;

				// Owner Group Types
				bbGroupTypes = bb.getGroupTypes();
				bbGroupTypesLen = bbGroupTypes.length;
				for (var bbti = 0; bbti < bbGroupTypesLen; bbti++) {
					groupGr.addQuery('type', 'CONTAINS', bbGroupTypes[bbti]);
				}

				// Owner Group Filter
				groupQuery = bb.getOwnerGroupFilter();
				if (groupQuery) groupGr.addEncodedQuery(groupQuery);
			},
			function addBbg(groupGr) {
				var groupId = groupGr.getUniqueValue();
				bbgOnce.update(
					null, bbgKey(groupId),
					function synchGroup(bbgId, key, state) {
						var group, bbg;

						if (state === Once.STATE.ADDED) {
							log.info('inserting BBG for {0} {1}',
									 bb + '', group + '');
							bbg = rw.createRecord(
								function createBbg(bbgGr) {
									bbgGr.setValue('board_builder', bbSysId);
									bbgGr.setValue('group', groupId);
								} // Triggers insert BR that calls bbg.added()
							);
							log.debug('{0} insert completed', bbg.toString());
						} else if (state === Once.STATE.EXISTS && bb.updateExisting()) {
							bbg = new BoardBuilderGroup(bbgId);
							bbg.getGr();
							group = new Group(groupGr, rw.MODE.SHARED);
							log.info('{0} synchronizing', bbg.toString());
							VtbBoard.synchGroupVtbs(bb, group, bbg);
						}
					}
				);
			});

		// Remove board builder groups that are no longer eligible.
		if (bb.deleteInvalid()) {
			bbgOnce.removeRemaining(
				function getGroupId(bbgId) {
					return bbgId;
				}
			);
		}
	};

	// Invoked by BR "Board Builder Group Added"
	p.added = function added() {
		var group = this.getGroup();
		var bb = this.getBoardBuilder();
		VtbBoard.synchGroupVtbs(bb, group, this);
	};

	return p;
})(BoardBuilderGroup);  // End BoardBuilderGroup_proto]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>peter.smith</sys_created_by>
        <sys_created_on>2018-06-14 15:39:17</sys_created_on>
        <sys_id>f8f40488db721f00898be3a84b961950</sys_id>
        <sys_mod_count>181</sys_mod_count>
        <sys_name>BoardBuilderGroup</sys_name>
        <sys_package display_value="Visual Task Board Builder" source="x_maog_vtbb">ae48259bdbee9b00898be3a84b9619f7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Visual Task Board Builder">ae48259bdbee9b00898be3a84b9619f7</sys_scope>
        <sys_update_name>sys_script_include_f8f40488db721f00898be3a84b961950</sys_update_name>
        <sys_updated_by>peter.smith</sys_updated_by>
        <sys_updated_on>2018-08-09 02:00:46</sys_updated_on>
    </sys_script_include>
</record_update>
