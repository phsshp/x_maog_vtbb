<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_maog_vtbb.GroupMember</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>GroupMember</name>
        <script><![CDATA[var GroupMember = Class.create();
GroupMember.prototype = (function GroupMember_proto(s) {
	var p = {};
	var TYPE = p.type = 'GroupMember';
	var TABLE = 'sys_user_grmember';

	var log = s.log = x_spar2_log.Logger.getLogger(TYPE, gs.getCurrentScopeName());

	RecordWrapper.setup(p, TABLE, 'GrpMbr');

	p.initialize = function initialize(grOrSysId) {
		this.set(grOrSysId);
	};

	p.getUser = function() {
		if (!this.user) {
			var userSysId = this.getGr().getValue('user');
			this.user = new User(userSysId);
		}
		return this.user;
	};	

	p.getGroup = function getGroup() {
		if (!this.group) {
			var groupSysId = this.getGr().getValue('group');
			this.group = new Group(groupSysId);
		}
		return this.group;
	};

	// The Group Member Added BR invokes this method.
	// Find board builders that apply to the user's new group.
	// Remove board builders that already have a vtb for this user.
	// Create vtbs for this user for remaining boards.
	p.added = function added() {
		var user, group, applicableBbs, userBbs, newBbs;

		user = this.getUser();
		group = this.getGroup();

		// Find applicable board builders
		applicableBbs = group.getApplicableBoardBuilders();

		// Find the user's boards that match any applicable board.
		userBbs = user.findExistingBoards(applicableBbs);

		// Remove applicable boards that have an existing board
		newBbs = Utils.subtractArraysHashed(
			applicableBbs, userBbs, function hash(val) {
				return val.getSysId();
			});

		// Create boards for remaining board builders
		Utils.a_forEach(newBbs, function f(bb) {
			bb.addBoard(group, user);
		});
	};
	
	// We do not remove VTBs that a Board Builder created on
	// behalf of a user.  This way, any customizations the user
	// made to their board remain intact.
	p.removed = function removed() {
		log.info('{0} removal from group is not implemented', this + '');
	};

	s.getUserGroups = function getUserGroups(user) {
		var groups = [];
		var gr = new GlideRecord(TABLE);
		gr.addQuery('user', 'IN', user.getSysId());
		gr.query();
		while (gr.next()) {
			groups.push(new Group(gr.getValue('group')));
		}
		return groups;
	};		

	s.getGroupUsers = function getGroupUsers(groupSysIds) {
		var users = [];
		var gr = new GlideRecord(TABLE);
		gr.addQuery('group', 'IN', groupSysIds);
		gr.query();
		while (gr.next()) {
			users.push(new User(gr.getValue('user')));
		}
		return users;
	};

	return p;
})(GroupMember);  // End GroupMember_proto]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>peter.smith</sys_created_by>
        <sys_created_on>2018-06-14 22:05:05</sys_created_on>
        <sys_id>d64c5940db361f00898be3a84b9619f4</sys_id>
        <sys_mod_count>28</sys_mod_count>
        <sys_name>GroupMember</sys_name>
        <sys_package display_value="Visual Task Board Builder" source="x_maog_vtbb">ae48259bdbee9b00898be3a84b9619f7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Visual Task Board Builder">ae48259bdbee9b00898be3a84b9619f7</sys_scope>
        <sys_update_name>sys_script_include_d64c5940db361f00898be3a84b9619f4</sys_update_name>
        <sys_updated_by>peter.smith</sys_updated_by>
        <sys_updated_on>2018-06-24 22:48:01</sys_updated_on>
    </sys_script_include>
</record_update>
