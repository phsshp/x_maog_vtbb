<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_maog_vtbb.GroupMember</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>GroupMember</name>
        <script><![CDATA[var GroupMember = Class.create();
GroupMember.prototype = (function GroupMember_proto(s) {
	var p = {};
	var TYPE = p.type = 'GroupMember';
	var TABLE = 'sys_user_grmember';

	var log = s.log = x_spar2_log.Logger.getLogger(TYPE, gs.getCurrentScopeName());

	var SPEC = { table: TABLE, prefix: 'GrpMbr', classFn: s, log: log };

	GrWrapper.mixProto(p);
	p.initialize = function initialize(wrap, mode) {
		new GrWrapper(wrap, mode, SPEC).mixThis(this);
	};

	p.getUser = function() {
		if (!this.user) {
			var userSysId = this.getGr().getValue('user');
			this.user = new User(userSysId);
		}
		return this.user;
	};

	p.getGroup = function getGroup() {
		if (!this.group) {
			var groupSysId = this.getGr().getValue('group');
			this.group = new Group(groupSysId);
		}
		return this.group;
	};

	// We do not remove VTBs that a Board Builder created on
	// behalf of a user.  This way, any customizations the user
	// made to their board remain intact.
	p.removed = function removed() {
		log.info('{0} removal from group is not implemented', this + '');
	};

	s.forGroupUsers = function forGroupUsers(group, fn, mode) {
		s.query(function filter(memberGr) {
			memberGr.addQuery('group', group.getSysId());
		}, function builder(memberGr) {
			fn(new User(memberGr.user, mode));
		});
	};

	// The Group Member Added BR invokes this method.
	p.added = function added() {
	
		if (log.isDebugging()) {
			log.debug('{0} member added');
		}

		// For now, just invalidate all boards so that they
		// are completely updated.
		BoardBuilder.invalidateBoardBuilders(true);
	};

	s.query = function query(filterFn, recordFn) {
		GrWrapper.query(filterFn, recordFn, SPEC);
	};

	return p;
})(GroupMember);  // End GroupMember_proto]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>peter.smith</sys_created_by>
        <sys_created_on>2018-06-14 22:05:05</sys_created_on>
        <sys_id>d64c5940db361f00898be3a84b9619f4</sys_id>
        <sys_mod_count>65</sys_mod_count>
        <sys_name>GroupMember</sys_name>
        <sys_package display_value="Visual Task Board Builder" source="x_maog_vtbb">ae48259bdbee9b00898be3a84b9619f7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Visual Task Board Builder">ae48259bdbee9b00898be3a84b9619f7</sys_scope>
        <sys_update_name>sys_script_include_d64c5940db361f00898be3a84b9619f4</sys_update_name>
        <sys_updated_by>peter.smith</sys_updated_by>
        <sys_updated_on>2018-08-09 04:49:13</sys_updated_on>
    </sys_script_include>
</record_update>
