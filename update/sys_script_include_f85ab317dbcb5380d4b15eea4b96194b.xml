<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_maog_vtbb.VtbLane</api_name>
        <client_callable>false</client_callable>
        <description>Manages a VTB Lane's type information.</description>
        <name>VtbLane</name>
        <script><![CDATA[var VtbLane = Class.create();
VtbLane.prototype = (function VtbLane_proto(s) {
	var p = {};
	var TYPE = p.type = 'VtbLane';
	var TABLE = 'vtb_lane';

	var log = s.log = x_spar2_log.Logger.getLogger(TYPE, gs.getCurrentScopeName());

	var slice = Function.prototype.apply.bind(Array.prototype.slice);
	var Dsc = Once.Descriptor;

	var UNASSIGNED = '';
	function isUnassigned(value) { return value === null || value === ''; }

	var NL = '\n';

	var SPEC = { table: TABLE, prefix: 'VTL', classFn: s, log: log };

	GrWrapper.mixProto(p);
	p.initialize = function initialize(wrap, mode) {
		new GrWrapper(wrap, mode, SPEC).mixThis(this);
	};

	s.synch = function	synch(bb, vtb, group, owner) {
		var laneOnce, highOrder;

		highOrder = 0;
		laneOnce = new Once('laneOnce');

		// Find existing Lanes.
		function findExistingLanes() {
			VtbLane.query(
				function filterLane(vtlGr) {
					vtlGr.addQuery('board', vtb.getSysId());
				},
				function checkLane(vtlGr) {
					var order, key, label, dsc;
					order = vtlGr.getValue('order');
					highOrder = Math.max(highOrder, order);
					label = vtlGr.getValue('name');
					key = vtlGr.getValue('value');
					dsc = new Dsc(key, label, order);
					dsc.vtlId = vtlGr.getUniqueValue();
					laneOnce.exists(dsc, key);
					if (false && log.isDebugging()) {
						log.debug('{0} Found lane [lane:{1} key:{2} label:{3}]',
								  vtb + '', dsc.vtlId + '', key + '', label);
					}
				}
			);
		}

		function synchVtbLane(dsc, key, state) {
			var vtl, vtlGr, vtlId, vtbId, label, updating;

			label = dsc.obj;
			vtbId = vtb.getSysId();
			vtlId = dsc.vtlId;

			updating = (state === Once.STATE.EXISTS);
			if (!updating && state !== Once.STATE.ADDED
				|| updating && !bb.updateExisting()) {
				log.debug('Skipping [Lane {0} {1}]', key, label);
				return;
			}

			if (updating) {
				vtlGr = new GlideRecord(TABLE);
				if (vtlGr.get(vtlId)) {
					vtlGr.setValue('board', vtbId);
					vtlGr.setValue('value', key);
					vtlGr.setValue('name', label);
					vtlGr.setValue('order', ++highOrder);

					vtl = new VtbLane(vtlGr, GrWrapper.MODE.SHARED);
					log.debug('updated {0} owner is {1}', vtl + '', owner + '');

					vtlGr.update();
				} else {
					log.warn('Could not find lane {0} {1} {2}',
							 vtlId, key, label);
				}
			} else {
				vtl = new VtbLane();
				vtlGr = vtl.getGr();
				vtlGr.setValue('board', vtbId);
				vtlGr.setValue('value', key);
				vtlGr.setValue('name', label);
				vtlGr.setValue('order', ++highOrder);
				log.info('adding {0}', vtl + '');
				vtlGr.update();
			}
		}

		// TODO: Finish
		function forEachChoice(taskGr, taskGe, TaskGed) {
			var fieldName, label, values;

			fieldName = bb.getLaneField();

			values.forEach(function choiceValue(value) {
				var bd = new BoardDescription(

				);
				taskGr.setValue(fieldName, value);
				label = taskGr[fieldName].getChoiceValue();
				laneOnce.add(value, label);
			});
		}

		// TODO: Finish
		function forEachReference() {
			var value, label, taskGa, fieldName;

			fieldName = bb.getLaneField();

			taskGa = new GlideAggregate(bb.getTaskTable());
			taskGa.addAggregate('COUNT', fieldName);
			taskGa.addEncodedQuery(vtb.getValue('board_filter'));
			taskGa.orderBy(fieldName);
			taskGa.groupBy(fieldName);
			taskGa.query();
			while (taskGa.next()) {
				value = taskGa.getValue(fieldName);
				laneOnce.exists(new Dsc(
					value,
					taskGa[fieldName].getDisplayValue()
				), value);
			}
		}

		// Set visibility after lanes are created below
		function setUserLaneVisibility() {
			var showUnassigned, showManager, showOwner, showBoardMembers, showGroupMembers, showUser, buf;

			showUnassigned = bb.isUnassignedVisible();
			showManager = bb.isManagerVisible();
			showOwner = bb.isOwnerVisible();	
			showBoardMembers = bb.areBoardMembersVisible();
			showGroupMembers = bb.areGroupMembersVisible();
			showUser = bb.isUserVisible();	

			// Iterate to create a preference for each user with a lane.
			laneOnce.forEach(
				function setPref(outerDsc, outerKey, outerState) {
					var prefName, prefGr, hide, updateId, userId, updating;

					userId = outerKey;
					if (!userId) {
						return;
					}

					// Find lanes to hide for this user.
					hide = [];
					laneOnce.forEach(
						function hideLanes(innerDsc, innerKey, innertState) {
							var show = showBoardMembers && innerDsc.boardMember ||
								showGroupMembers && innerDsc.groupMember ||
								showUser && (innerDsc.boardMember || innerDsc.groupMember) && innerKey === userId ||
								showUnassigned && innerDsc.unassigned ||
								showManager && innerDsc.manager ||
								showOwner && innerDsc.owner;
							if (!show) {
								hide.push(innerDsc.vtlId);
								if (false && log.isDebugging()) {
									buf = [];
									buf.push('\t\tshowBoardMembers' + '=' + showBoardMembers + NL);
									buf.push(NL);
									buf.push('\t\tinnerDsc.boardMember' + '=' + innerDsc.boardMember + NL);
									buf.push(NL);
									buf.push('\t\tshowGroupMembers' + '=' + showGroupMembers + NL);
									buf.push(NL);
									buf.push('\t\tinnerDsc.groupMember' + '=' + innerDsc.groupMember + NL);
									buf.push(NL);
									buf.push('\t\tshowUser' + '=' + showUser + NL);
									buf.push(NL);
									buf.push('\t\tinnerDsc.member' + '=' + innerDsc.member + NL);
									buf.push(NL);
									buf.push('\t\tinnerKey' + '=' + innerKey + NL);
									buf.push(NL);
									buf.push('\t\tuserId' + '=' + userId + NL);
									buf.push(NL);
									buf.push('\t\tshowUnassigned' + '=' + showUnassigned + NL);
									buf.push(NL);
									buf.push('\t\tinnerDsc.unassigned' + '=' + innerDsc.unassigned + NL);
									buf.push(NL);
									buf.push('\t\tshowManager' + '=' + showManager + NL);
									buf.push(NL);
									buf.push('\t\tinnerDsc.manager' + '=' + innerDsc.manager + NL);
									buf.push(NL);
									buf.push('\t\tshowOwner' + '=' + showOwner + NL);
									buf.push(NL);
									buf.push('\t\tinnerDsc.owner' + '=' + innerDsc.owner + NL);
									log.debug('Hiding lane ' + NL + buf.join(''));
								}
							}
						}
					);

					if (hide.length > 0) {
						prefName = 'vtb.board.' + vtb.getSysId() + '.hiddenLanes';
						prefGr = new GlideRecord('sys_user_preference');
						prefGr.addQuery('name', prefName);
						prefGr.addQuery('user', userId);
						prefGr.query();
						updating = prefGr.next();
						if (!updating) {
							prefGr.initialize();
							prefGr.setNewGuidValue(gs.generateGUID());
						}
						prefGr.setValue('description', 'Generated for ' + vtb.getDisplayValue());
						prefGr.setValue('name', prefName);
						prefGr.setValue('type', 'string');
						prefGr.setValue('user', outerKey);
						hide = hide.join('-');
						prefGr.setValue('value', hide);
						prefGr.setValue('system', false);

						if (log.isDebugging()) {
							if (updating) {
								log.debug('updating user preference {0} {1} {2}={3}',
										  prefGr.getUniqueValue(), outerDsc.obj, prefName, hide);
							} else {
								log.info('adding user preference {0} {1} {2}={3}',
										 prefGr.getUniqueValue(), outerDsc.obj, prefName, hide);
							}
						}
						prefGr.update();
					}
				}
			);
		}

		function sortLanes() {
			var order = 0, vtlGr;

			// Unassigned comes first.
			vtlGr = new GlideRecord('vtb_lane');
			vtlGr.addQuery('board', vtb.getSysId());
			vtlGr.addNullQuery('value');
			vtlGr.query();
			if (vtlGr.next()) {
				vtlGr.order = order++;
			}
			vtlGr.update();

			// Sort other lanes.
			vtlGr = new GlideRecord('vtb_lane');
			vtlGr.addQuery('board', vtb.getSysId());
			vtlGr.addNotNullQuery('value');
			vtlGr.orderBy('name');

			vtlGr.query();

			while (vtlGr.next()) {
				vtlGr.order = order++;
				vtlGr.update();
			}
		}

		function createUserContent() {
			var mgr, dsc, userUserFilter, userRoleIds;

			// Create User Lanes
			if (bb.showUnassignedLane()) {
				dsc = new Dsc(UNASSIGNED, bb.getUnassignedLaneLabel());
				laneOnce.update(
					dsc, UNASSIGNED,
					function memberLane(oldDsc, key, state) {
						synchVtbLane(oldDsc, key, state);
						oldDsc.unassigned = true;
					}
				);
			}

			if (bb.showManagerLane()) {
				mgr = group.getManager();
				if (mgr) {
					dsc = new Dsc(mgr.getSysId(), mgr.getDisplayValue());
					laneOnce.update(
						dsc, mgr.getSysId(),
						function memberLane(oldDsc, key, state) {
							synchVtbLane(oldDsc, key, state);
							oldDsc.owner = true;
						}
					);
				}
			}

			if (bb.showOwnerLane()) {
				dsc = new Dsc(owner.getSysId(), owner.getDisplayValue());
				laneOnce.update(
					dsc, owner.getSysId(),
					function memberLane(oldDsc, key, state) {
						synchVtbLane(oldDsc, key, state);
						oldDsc.owner = true;
					}
				);
			}

			// If board member lanes were requested, add every user
			// who is a board member.
			if (bb.showBoardMemberLanes()) {
				VtbMember.query(
					function vtbMemberFilter(vtmGr) {
						vtmGr.query('board', vtb.getSysId());
					}, 
					function vtbMemberActions(vtmGr) {
						var userId = vtmGr.getValue('user');
						var userName = vtmGr.user.getDisplayValue();
						dsc = new Dsc(userId, userName);
						laneOnce.update(
							dsc, userId,
							function BoardMemberLane(oldDsc, key, state) {
								synchVtbLane(oldDsc, key, state);
								oldDsc.boardMember = true;
							}
						);
					}
				);
			}

			log.debug('VtbLane before groupMemberLanes owner is {0}', owner + '');

			// If group member lanes were requested, add every user
			// who is a group member.
			if (bb.showGroupMemberLanes()) {
				userUserFilter = bb.getUserUserFilter(); // Member User Filter
				userRoleIds = bb.getUserRoles(); // Member Roles
				group.forUsers(
					function groupMemberFilter(memberGr) {
						if (userUserFilter) memberGr.addEncodedQuery(userUserFilter);
						log.debug('VtbLane groupMemberFilter owner is {0}', owner + '');
					},
					function groupMemberActions(memberGr) {
						var updating, userId, userName;
						userId = memberGr.getUniqueValue();
						userName = memberGr.getDisplayValue();
						dsc = new Dsc(userId, userName);
						laneOnce.update(
							dsc, userId,
							function groupMemberLane(oldDsc, key, state) {
								synchVtbLane(oldDsc, key, state);
								oldDsc.groupMember = true;
							}
						);
					},
					bb.includeUserGroupMembers(),
					bb.includeMemberGroupManager()
				);
			}

			log.debug('VtbLane after groupMemberLanes owner is {0}', owner + '');

			sortLanes();
			setUserLaneVisibility();
		}

		function manageReference(taskGe) {
			var refTable = taskGe.getReferenceTable();
			switch (refTable) {
				case 'sys_user':
					createUserContent();
					break;
					//	case 'sys_user_group':
					//		forEachGroup(fn);
					// 		break;
				default:
					forEachReference();
			}
		}

		function addLanes() {
			var taskGr, taskGe, TaskGed, laneType, values;

			taskGr = new GlideRecord(bb.getTaskTable());
			taskGr.initialize();
			taskGe = taskGr[bb.getLaneField()];
			values = taskGe.getChoices();
			TaskGed = taskGe.getED();

			laneType = TaskGed.getInternalType();
			if (TaskGed.isChoiceTable()) {
				forEachChoice(taskGr, taskGe, TaskGed);
			} else {
				switch (laneType) {
					case 'reference':
						manageReference(taskGe);
						break;
					default:
						new TypeError('Unknown lane type: ' + laneType);
				}
			}
		}

		findExistingLanes();
		addLanes();
	};

	s.query = function query(filterFn, recordFn) {
		GrWrapper.query(filterFn, recordFn, SPEC);
	};

	return p;
})(VtbLane);  // End VtbLane_proto]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>peter.smith</sys_created_by>
        <sys_created_on>2018-07-07 22:14:31</sys_created_on>
        <sys_id>f85ab317dbcb5380d4b15eea4b96194b</sys_id>
        <sys_mod_count>134</sys_mod_count>
        <sys_name>VtbLane</sys_name>
        <sys_package display_value="Visual Task Board Builder" source="x_maog_vtbb">ae48259bdbee9b00898be3a84b9619f7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Visual Task Board Builder">ae48259bdbee9b00898be3a84b9619f7</sys_scope>
        <sys_update_name>sys_script_include_f85ab317dbcb5380d4b15eea4b96194b</sys_update_name>
        <sys_updated_by>peter.smith</sys_updated_by>
        <sys_updated_on>2018-08-09 05:54:45</sys_updated_on>
    </sys_script_include>
</record_update>
