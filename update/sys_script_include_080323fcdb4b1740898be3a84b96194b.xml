<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_maog_vtbb.VtbMember</api_name>
        <client_callable>false</client_callable>
        <description>Visual Task Board Member wrapper.</description>
        <name>VtbMember</name>
        <script><![CDATA[var VtbMember = Class.create();
VtbMember.prototype = (function VtbMember_proto(s) {
	var p = {};
	var TYPE = p.type = 'VtbMember';
	var TABLE = 'vtb_board_member';

	var log = s.log = x_spar2_log.Logger.getLogger(TYPE, gs.getCurrentScopeName());

	var SPEC = { table: TABLE, prefix: 'VTM', classFn: s, log: log };

	GrWrapper.mixProto(p);
	p.initialize = function initialize(wrap, mode) {
		new GrWrapper(wrap, mode, SPEC).mixThis(this);
	};

	s.internalName = function internalName(vtmGr) {
		var buffer = ['['];
		buffer.push(vtmGr.board.sys_id + '');
		buffer.push(' ');
		buffer.push(vtmGr.board.getDisplayValue());
		buffer.push('][');
		buffer.push(vtmGr.user.sys_id + '');
		buffer.push(' ');
		buffer.push(vtmGr.user.getDisplayValue());
		buffer.push(']');
		return buffer.join('');
	};

	// Add members to a VTB associated with this BoardBuilder.
	//
	// Invoked as part of VTB creation.
	//
	// Precondition: Given this BoardBuilder, a group satisfying
	//  the postconditions for synchBbgs, and a
	//  VTB corresponding to a user meeting this BoardBuilder's
	//  conditions for board ownership,
	// Postcondition: There exists exactly one VtbMember record
	//  that satisfies this BoardBuilder and Group's membership
	//  conditions.
	//
	s.synchVtbMembers = function synchVtbMembers(bb, vtb, group) {
		var vtmOnce;
		var includeMembers, includeManager, memberUserFilter, memberRoleIds;

		if (log.isDebugging()) {
			log.debug('{0}.synchVtbMembers({1}, {2})', TYPE,
					  bb.toString(), group.toString());
		}

		// Register member records that already exist for this board.
		vtmOnce = new Once('vtmOnce');		
		s.query(
			function filter(vtmGr) {
				vtmGr.addQuery('board', vtb.getSysId());
			},
			function process(vtmGr) {
				var vtmId = vtmGr.getUniqueValue();
				var key = vtmGr.getValue('user');
				vtmOnce.exists(vtmId, key);
			}
		);

		// Create records for new members
		includeMembers = bb.includeMemberGroupMembers(); // Member Group Members
		includeManager = bb.includeMemberGroupManager(); // Member Group Manager
		memberUserFilter = bb.getMemberUserFilter(); // Member User Filter
		memberRoleIds = bb.getMemberRoles(); // Member Roles
		group.forUsers(
			function filterBoardMembers(memberGr) {
				if (memberUserFilter) memberGr.addEncodedQuery(memberUserFilter);
			},
			function addMember(memberGr) {
				var member = new User(memberGr, GrWrapper.MODE.SHARED);
				if (member.hasRoleSysIds(memberRoleIds)) {
					vtmOnce.update(
						null, member.getSysId(),
						function synchVtm(vtmId, key, state) {
							var updating, vtm;

							updating = (state === Once.STATE.EXISTS);

							if (state !== Once.STATE.ADDED && !updating) return;
							if (updating && !bb.updateExisting()) return;

							if (!updating) {
								vtm = new VtbMember();
								vtm.setValue('board', vtb.getSysId());
								vtm.setValue('user', key);
								vtm.update();
							}

							if (log.isDebugging()) {
								if (updating) {
									log.debug('[VTM {0} {1} [{2}]] synchronizing', vtmId, bb.toString(), key);
								} else {
									log.debug('{0} added', vtm.toString());
								}
							}
							vtb.synchVtbBookmark(bb, group, member);
						}
					);
				}
			},
			includeManager, includeMembers,
			GrWrapper.MODE.SHARED
		);

		// Delete redundant members
		if (bb.deleteInvalid()) {
			vtbOnce.removeRemaining(function getVtm(vtmId) {
				return vtmId;
			});
		}
	};

	s.query = function query(filterFn, recordFn) {
		GrWrapper.query(filterFn, recordFn, SPEC);
	};

	return p;
})(VtbMember);  // End VtbMember_proto]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>peter.smith</sys_created_by>
        <sys_created_on>2018-06-30 02:00:34</sys_created_on>
        <sys_id>080323fcdb4b1740898be3a84b96194b</sys_id>
        <sys_mod_count>40</sys_mod_count>
        <sys_name>VtbMember</sys_name>
        <sys_package display_value="Visual Task Board Builder" source="x_maog_vtbb">ae48259bdbee9b00898be3a84b9619f7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Visual Task Board Builder">ae48259bdbee9b00898be3a84b9619f7</sys_scope>
        <sys_update_name>sys_script_include_080323fcdb4b1740898be3a84b96194b</sys_update_name>
        <sys_updated_by>peter.smith</sys_updated_by>
        <sys_updated_on>2018-08-09 05:48:45</sys_updated_on>
    </sys_script_include>
</record_update>
